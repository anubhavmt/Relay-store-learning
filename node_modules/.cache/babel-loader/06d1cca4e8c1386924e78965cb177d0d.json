{"ast":null,"code":"var _ApprootQuery,\n    _ApprootupdateBookQuery,\n    _jsxFileName = \"/Users/anubhavgupta/Documents/react_learning/graphql-react/relay-store-learning/src/Approot.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport App from \"./App\";\nimport { useLazyLoadQuery, useMutation } from \"react-relay/hooks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst appquery = _ApprootQuery !== void 0 ? _ApprootQuery : (_ApprootQuery = require(\"./__generated__/ApprootQuery.graphql\"), _ApprootQuery.hash && _ApprootQuery.hash !== \"938e991c903a95d18e0391148e59f080\" && console.error(\"The definition of 'ApprootQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\"), _ApprootQuery);\nconst appMutateupdatequery = _ApprootupdateBookQuery !== void 0 ? _ApprootupdateBookQuery : (_ApprootupdateBookQuery = require(\"./__generated__/ApprootupdateBookQuery.graphql\"), _ApprootupdateBookQuery.hash && _ApprootupdateBookQuery.hash !== \"aecc280cb9a2b888276e1b2838ab4522\" && console.error(\"The definition of 'ApprootupdateBookQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\"), _ApprootupdateBookQuery);\n\nfunction Approot(props) {\n  _s();\n\n  const [commitupdate] = useMutation(appMutateupdatequery);\n  const data = useLazyLoadQuery(appquery, {}, {\n    fetchPolicy: 'store-or-network'\n  }); // console.log(\"approot......\")\n  // console.log(data);\n\n  /*\n   The useRelayEnvironment().getStore() function returns a Store object from the Relay Modern library. The type of object returned depends on the method called on the Store object.\n   Calling getStore().getSource() returns a RecordSource object, which is an interface for reading and writing records in the store.\n   Calling getStore().getSource().get(<dataID>) returns a RecordProxy object, which is a mutable interface for a single record in the store with the specified dataID.\n   Calling getStore().getSource().get(<selector>) returns a RecordSourceSelectorProxy object, which is a mutable interface for a set of records in the store that match the specified selector.\n   So, depending on which method is called on the Store object, the returned type could be either a RecordProxy or a RecordSourceSelectorProxy.\n  \n   RelayModernStore is a central store for managing the data cache of a Relay application, \n  while RelayRecordSourceSelectorProxy is a lower-level API for reading from and writing to\n  specific pieces of data in the store.\n    The type of the store variable obtained from environment.getStore() is RelayModernStore. \n  The RelayModernStore is the central class in Relay that manages the cache of records, \n  and is responsible for reading and writing data to the cache. It is not a RecordSourceSelectorProxy \n  or RecordProxy, but it provides methods to interact with those objects.\n   You can use the RelayModernStore object to get a RecordSourceSelectorProxy using the getSource\n  method, which returns a RelayRecordSourceSelectorProxy. For example, to read data from the \n  cache using a RelayRecordSourceSelectorProxy, you can use the following code:\n    const store = environment.getStore();\n  const source = store.getSource();\n  const user = source.get('123');\n  console.log(user.getValue('name')); // Logs the name of the user record with ID '123'\n  \n  In this example, we get the RelayModernStore from the RelayModernEnvironment, \n  and use the getSource method to get a RelayRecordSourceSelectorProxy. We then use the get \n  method to get the user record with ID '123', and use the getValue method to read the value of\n   the name field on the user record.\n    */\n\n  /*\n   Doc refering: \n   */\n  // console.log(\"Type: RelayModernStore\")\n  // console.log(useRelayEnvironment().getStore())\n  // console.log(\"Type: RelayRecordSource\")\n  // console.log(useRelayEnvironment().getStore().getSource())\n  // console.log(\"..........................getSource().getRecordIDs()\")\n  // console.log(useRelayEnvironment().getStore().getSource().getRecordIDs())\n  // console.log(\"..........................getSource().toJSON()\")\n  // console.log(useRelayEnvironment().getStore().getSource().toJSON())\n  // console.log(typeof useRelayEnvironment().getStore().getSource().get(\"1\"))\n  // console.log(useRelayEnvironment().getStore().getSource().get(\"1\"))\n  // console.log(typeof useRelayEnvironment().getStore().getSource().getRecordIDs())\n  // console.log(useRelayEnvironment().getStore().getSource().getRecordIDs())\n\n  return /*#__PURE__*/_jsxDEV(React.Suspense, {\n    fallback: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading.....\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 31\n    }, this),\n    children: [/*#__PURE__*/_jsxDEV(App, {\n      books: data.books[0]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      onSubmit: e => {\n        e.preventDefault();\n        let update = {\n          id: e.target[0].value,\n          book: {\n            id: e.target[0].value,\n            title: e.target[1].value,\n            author: {\n              id: e.target[2].value,\n              firstname: e.target[3].value,\n              secondname: e.target[4].value\n            }\n          }\n        };\n        commitupdate({\n          variables: update,\n          onCompleted: (response, errors) => {\n            console.log(\"Response received from server.\");\n          },\n          updater: store => {\n            console.log(\"in mutaiton\");\n            console.log(\"Type: RelayRecordSourceSelectorProxy\"); // Doc: https://relay.dev/docs/api-reference/store/#recordsourceselectorproxy\n\n            /*\n               interface RecordSourceSelectorProxy {\n              create(dataID: string, typeName: string): RecordProxy;\n              delete(dataID: string): void;\n              get(dataID: string): ?RecordProxy;\n              getRoot(): RecordProxy;\n              getRootField(fieldName: string): ?RecordProxy;\n              getPluralRootField(fieldName: string): ?Array<?RecordProxy>;\n              invalidateStore(): void;\n            }\n            */\n\n            console.log(store);\n            console.log(\"............................store.get(1)\");\n            console.log(store.get(\"1\"));\n            console.log(\"............................store.get(client:root)\");\n            console.log(store.get(\"client:root\"));\n            console.log(\"............................store.get(3)\");\n            console.log(store.get(\"3\"));\n            console.log(\"............................store.get(wrong)\");\n            console.log(store.get(\"wrong\")); // will get undefined\n\n            console.log(\"............................store.getRoot()\");\n            console.log(store.getRoot());\n            window.store = store;\n          },\n          onError: err => console.error(err)\n        });\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"fname\",\n        children: \"Book id:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"fname\",\n        placeholder: \"Type Book id\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 71\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"fname\",\n        children: \"Book title:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"fname\",\n        placeholder: \"Type Book title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 72\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"fname\",\n        children: \"This author id:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"fname\",\n        placeholder: \"Type Book title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 72\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"fname\",\n        children: \"Author firstname:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"fname\",\n        placeholder: \"Type Book title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 72\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"fname\",\n        children: \"Author secondname:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"fname\",\n        placeholder: \"Type Book title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 72\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Approot, \"pYFhDEvmUD2G05ruy1Hr91pOmE8=\", false, function () {\n  return [useMutation, useLazyLoadQuery];\n});\n\n_c = Approot;\nexport default Approot;\n\nvar _c;\n\n$RefreshReg$(_c, \"Approot\");","map":{"version":3,"names":["React","App","useLazyLoadQuery","useMutation","appquery","appMutateupdatequery","Approot","props","commitupdate","data","fetchPolicy","books","e","preventDefault","update","id","target","value","book","title","author","firstname","secondname","variables","onCompleted","response","errors","console","log","updater","store","get","getRoot","window","onError","err","error"],"sources":["/Users/anubhavgupta/Documents/react_learning/graphql-react/relay-store-learning/src/Approot.tsx"],"sourcesContent":["import React, { useCallback, useState } from \"react\";\nimport App from \"./App\";\nimport { graphql } from \"babel-plugin-relay/macro\";\nimport { useLazyLoadQuery, useMutation, useRelayEnvironment } from \"react-relay/hooks\";\nimport { RecordSourceSelectorProxy, Store } from \"relay-runtime\";\nimport {\n  ApprootQuery,\n  ApprootQuery$data,\n  ApprootQuery$variables,\n} from \"./__generated__/ApprootQuery.graphql\";\nimport {\n  ApprootupdateBookQuery,\n  ApprootupdateBookQuery$variables,\n} from \"./__generated__/ApprootupdateBookQuery.graphql\";\n\nconst appquery = graphql`\n  # Queries in graphql tags must start with the module name ('App') and end with 'Query'. Got 'allbook' instead.\n  query ApprootQuery {\n    books {\n      id\n      ...App_detail\n    }\n  }\n`;\n\nconst appMutateupdatequery = graphql`\n  # Queries in graphql tags must start with the module name ('App') and end with 'Query'. Got 'allbook' instead.\n\n  mutation ApprootupdateBookQuery($id: ID!, $book: bookInput!) {\n    updateBook(bookId: $id, book: $book) {\n      id\n      ...App_detail\n    }\n  }\n`;\n\nfunction Approot(props: any) {\n  const [commitupdate] = useMutation<ApprootupdateBookQuery>(appMutateupdatequery);\n\n  const data = useLazyLoadQuery<ApprootQuery>(appquery, {},{fetchPolicy: 'store-or-network'});\n  // console.log(\"approot......\")\n  // console.log(data);\n\n\n\n  /*\n\n  The useRelayEnvironment().getStore() function returns a Store object from the Relay Modern library. The type of object returned depends on the method called on the Store object.\n\n  Calling getStore().getSource() returns a RecordSource object, which is an interface for reading and writing records in the store.\n\n  Calling getStore().getSource().get(<dataID>) returns a RecordProxy object, which is a mutable interface for a single record in the store with the specified dataID.\n\n  Calling getStore().getSource().get(<selector>) returns a RecordSourceSelectorProxy object, which is a mutable interface for a set of records in the store that match the specified selector.\n\n  So, depending on which method is called on the Store object, the returned type could be either a RecordProxy or a RecordSourceSelectorProxy.\n\n\n\n\n  RelayModernStore is a central store for managing the data cache of a Relay application, \n  while RelayRecordSourceSelectorProxy is a lower-level API for reading from and writing to\n  specific pieces of data in the store.\n\n\n  The type of the store variable obtained from environment.getStore() is RelayModernStore. \n  The RelayModernStore is the central class in Relay that manages the cache of records, \n  and is responsible for reading and writing data to the cache. It is not a RecordSourceSelectorProxy \n  or RecordProxy, but it provides methods to interact with those objects.\n\n  You can use the RelayModernStore object to get a RecordSourceSelectorProxy using the getSource\n  method, which returns a RelayRecordSourceSelectorProxy. For example, to read data from the \n  cache using a RelayRecordSourceSelectorProxy, you can use the following code:\n\n\n  const store = environment.getStore();\n  const source = store.getSource();\n  const user = source.get('123');\n  console.log(user.getValue('name')); // Logs the name of the user record with ID '123'\n  \n  In this example, we get the RelayModernStore from the RelayModernEnvironment, \n  and use the getSource method to get a RelayRecordSourceSelectorProxy. We then use the get \n  method to get the user record with ID '123', and use the getValue method to read the value of\n   the name field on the user record.\n\n\n  */\n\n  /*\n\n  Doc refering: \n\n  */\n  // console.log(\"Type: RelayModernStore\")\n  // console.log(useRelayEnvironment().getStore())\n  // console.log(\"Type: RelayRecordSource\")\n  // console.log(useRelayEnvironment().getStore().getSource())\n  // console.log(\"..........................getSource().getRecordIDs()\")\n  // console.log(useRelayEnvironment().getStore().getSource().getRecordIDs())\n  // console.log(\"..........................getSource().toJSON()\")\n  // console.log(useRelayEnvironment().getStore().getSource().toJSON())\n  \n  // console.log(typeof useRelayEnvironment().getStore().getSource().get(\"1\"))\n  // console.log(useRelayEnvironment().getStore().getSource().get(\"1\"))\n  // console.log(typeof useRelayEnvironment().getStore().getSource().getRecordIDs())\n  // console.log(useRelayEnvironment().getStore().getSource().getRecordIDs())\n\n  return (\n    <React.Suspense fallback={<div>Loading.....</div>}>\n      <App books={data.books[0]} />\n      <form\n        className=\"form\"\n        onSubmit={(e: any) => {\n          e.preventDefault();\n\n          let update: any = {\n            id: e.target[0].value,\n            book:{\n              id: e.target[0].value,\n              title: e.target[1].value,\n              author: {\n                id: e.target[2].value,\n                firstname: e.target[3].value,\n                secondname: e.target[4].value\n              }\n            }\n          };\n\n          commitupdate({\n            variables: update,\n            onCompleted: (response, errors) => {\n              console.log(\"Response received from server.\");\n            },\n            updater: (store) => {\n\n              console.log(\"in mutaiton\");\n\n\n              console.log(\"Type: RelayRecordSourceSelectorProxy\")\n              // Doc: https://relay.dev/docs/api-reference/store/#recordsourceselectorproxy\n\n              /*\n\n                interface RecordSourceSelectorProxy {\n                create(dataID: string, typeName: string): RecordProxy;\n                delete(dataID: string): void;\n                get(dataID: string): ?RecordProxy;\n                getRoot(): RecordProxy;\n                getRootField(fieldName: string): ?RecordProxy;\n                getPluralRootField(fieldName: string): ?Array<?RecordProxy>;\n                invalidateStore(): void;\n }\n              */\n\n              console.log(store);\n              console.log(\"............................store.get(1)\")\n              console.log(store.get(\"1\"));\n              console.log(\"............................store.get(client:root)\")\n              console.log(store.get(\"client:root\"));\n              console.log(\"............................store.get(3)\")\n              console.log(store.get(\"3\"));\n              console.log(\"............................store.get(wrong)\")\n              console.log(store.get(\"wrong\")); // will get undefined\n              console.log(\"............................store.getRoot()\")\n              console.log(store.getRoot());\n              \n\n              (window as any).store = store;\n            },\n            onError: (err) => console.error(err),\n          });\n        }}\n      >\n        <label htmlFor=\"fname\">Book id:</label>\n        <input type=\"number\" id=\"fname\" placeholder=\"Type Book id\" /> <br></br>\n        <label htmlFor=\"fname\">Book title:</label>\n        <input type=\"text\" id=\"fname\" placeholder=\"Type Book title\" /> <br></br>\n        <label htmlFor=\"fname\">This author id:</label>\n        <input type=\"text\" id=\"fname\" placeholder=\"Type Book title\" /> <br></br>\n        <label htmlFor=\"fname\">Author firstname:</label>\n        <input type=\"text\" id=\"fname\" placeholder=\"Type Book title\" /> <br></br>\n        <label htmlFor=\"fname\">Author secondname:</label>\n        <input type=\"text\" id=\"fname\" placeholder=\"Type Book title\" /> <br></br>\n        <input type=\"submit\" />\n      </form>\n    </React.Suspense>\n  );\n}\n\nexport default Approot;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}