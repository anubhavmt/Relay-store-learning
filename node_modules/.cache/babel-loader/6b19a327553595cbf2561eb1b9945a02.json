{"ast":null,"code":"//      \n'use strict';\n\nconst path = require('path');\n\nconst loaders = require('./loaders');\n\nconst readFile = require('./readFile');\n\nconst cacheWrapper = require('./cacheWrapper');\n\nconst getDirectory = require('./getDirectory');\n\nconst getPropertyByPath = require('./getPropertyByPath');\n\nconst MODE_SYNC = 'sync'; // An object value represents a config object.\n// null represents that the loader did not find anything relevant.\n// undefined represents that the loader found something relevant\n// but it was empty.\n\nclass Explorer {\n  constructor(options) {\n    this.loadCache = options.cache ? new Map() : null;\n    this.loadSyncCache = options.cache ? new Map() : null;\n    this.searchCache = options.cache ? new Map() : null;\n    this.searchSyncCache = options.cache ? new Map() : null;\n    this.config = options;\n    this.validateConfig();\n  }\n\n  clearLoadCache() {\n    if (this.loadCache) {\n      this.loadCache.clear();\n    }\n\n    if (this.loadSyncCache) {\n      this.loadSyncCache.clear();\n    }\n  }\n\n  clearSearchCache() {\n    if (this.searchCache) {\n      this.searchCache.clear();\n    }\n\n    if (this.searchSyncCache) {\n      this.searchSyncCache.clear();\n    }\n  }\n\n  clearCaches() {\n    this.clearLoadCache();\n    this.clearSearchCache();\n  }\n\n  validateConfig() {\n    const config = this.config;\n    config.searchPlaces.forEach(place => {\n      const loaderKey = path.extname(place) || 'noExt';\n      const loader = config.loaders[loaderKey];\n\n      if (!loader) {\n        throw new Error(`No loader specified for ${getExtensionDescription(place)}, so searchPlaces item \"${place}\" is invalid`);\n      }\n    });\n  }\n\n  search(searchFrom) {\n    searchFrom = searchFrom || process.cwd();\n    return getDirectory(searchFrom).then(dir => {\n      return this.searchFromDirectory(dir);\n    });\n  }\n\n  searchFromDirectory(dir) {\n    const absoluteDir = path.resolve(process.cwd(), dir);\n\n    const run = () => {\n      return this.searchDirectory(absoluteDir).then(result => {\n        const nextDir = this.nextDirectoryToSearch(absoluteDir, result);\n\n        if (nextDir) {\n          return this.searchFromDirectory(nextDir);\n        }\n\n        return this.config.transform(result);\n      });\n    };\n\n    if (this.searchCache) {\n      return cacheWrapper(this.searchCache, absoluteDir, run);\n    }\n\n    return run();\n  }\n\n  searchSync(searchFrom) {\n    searchFrom = searchFrom || process.cwd();\n    const dir = getDirectory.sync(searchFrom);\n    return this.searchFromDirectorySync(dir);\n  }\n\n  searchFromDirectorySync(dir) {\n    const absoluteDir = path.resolve(process.cwd(), dir);\n\n    const run = () => {\n      const result = this.searchDirectorySync(absoluteDir);\n      const nextDir = this.nextDirectoryToSearch(absoluteDir, result);\n\n      if (nextDir) {\n        return this.searchFromDirectorySync(nextDir);\n      }\n\n      return this.config.transform(result);\n    };\n\n    if (this.searchSyncCache) {\n      return cacheWrapper(this.searchSyncCache, absoluteDir, run);\n    }\n\n    return run();\n  }\n\n  searchDirectory(dir) {\n    return this.config.searchPlaces.reduce((prevResultPromise, place) => {\n      return prevResultPromise.then(prevResult => {\n        if (this.shouldSearchStopWithResult(prevResult)) {\n          return prevResult;\n        }\n\n        return this.loadSearchPlace(dir, place);\n      });\n    }, Promise.resolve(null));\n  }\n\n  searchDirectorySync(dir) {\n    let result = null;\n\n    for (const place of this.config.searchPlaces) {\n      result = this.loadSearchPlaceSync(dir, place);\n      if (this.shouldSearchStopWithResult(result)) break;\n    }\n\n    return result;\n  }\n\n  shouldSearchStopWithResult(result) {\n    if (result === null) return false;\n    if (result.isEmpty && this.config.ignoreEmptySearchPlaces) return false;\n    return true;\n  }\n\n  loadSearchPlace(dir, place) {\n    const filepath = path.join(dir, place);\n    return readFile(filepath).then(content => {\n      return this.createCosmiconfigResult(filepath, content);\n    });\n  }\n\n  loadSearchPlaceSync(dir, place) {\n    const filepath = path.join(dir, place);\n    const content = readFile.sync(filepath);\n    return this.createCosmiconfigResultSync(filepath, content);\n  }\n\n  nextDirectoryToSearch(currentDir, currentResult) {\n    if (this.shouldSearchStopWithResult(currentResult)) {\n      return null;\n    }\n\n    const nextDir = nextDirUp(currentDir);\n\n    if (nextDir === currentDir || currentDir === this.config.stopDir) {\n      return null;\n    }\n\n    return nextDir;\n  }\n\n  loadPackageProp(filepath, content) {\n    const parsedContent = loaders.loadJson(filepath, content);\n    const packagePropValue = getPropertyByPath(parsedContent, this.config.packageProp);\n    return packagePropValue || null;\n  }\n\n  getLoaderEntryForFile(filepath) {\n    if (path.basename(filepath) === 'package.json') {\n      const loader = this.loadPackageProp.bind(this);\n      return {\n        sync: loader,\n        async: loader\n      };\n    }\n\n    const loaderKey = path.extname(filepath) || 'noExt';\n    return this.config.loaders[loaderKey] || {};\n  }\n\n  getSyncLoaderForFile(filepath) {\n    const entry = this.getLoaderEntryForFile(filepath);\n\n    if (!entry.sync) {\n      throw new Error(`No sync loader specified for ${getExtensionDescription(filepath)}`);\n    }\n\n    return entry.sync;\n  }\n\n  getAsyncLoaderForFile(filepath) {\n    const entry = this.getLoaderEntryForFile(filepath);\n    const loader = entry.async || entry.sync;\n\n    if (!loader) {\n      throw new Error(`No async loader specified for ${getExtensionDescription(filepath)}`);\n    }\n\n    return loader;\n  }\n\n  loadFileContent(mode, filepath, content) {\n    if (content === null) {\n      return null;\n    }\n\n    if (content.trim() === '') {\n      return undefined;\n    }\n\n    const loader = mode === MODE_SYNC ? this.getSyncLoaderForFile(filepath) : this.getAsyncLoaderForFile(filepath);\n    return loader(filepath, content);\n  }\n\n  loadedContentToCosmiconfigResult(filepath, loadedContent) {\n    if (loadedContent === null) {\n      return null;\n    }\n\n    if (loadedContent === undefined) {\n      return {\n        filepath,\n        config: undefined,\n        isEmpty: true\n      };\n    }\n\n    return {\n      config: loadedContent,\n      filepath\n    };\n  }\n\n  createCosmiconfigResult(filepath, content) {\n    return Promise.resolve().then(() => {\n      return this.loadFileContent('async', filepath, content);\n    }).then(loaderResult => {\n      return this.loadedContentToCosmiconfigResult(filepath, loaderResult);\n    });\n  }\n\n  createCosmiconfigResultSync(filepath, content) {\n    const loaderResult = this.loadFileContent('sync', filepath, content);\n    return this.loadedContentToCosmiconfigResult(filepath, loaderResult);\n  }\n\n  validateFilePath(filepath) {\n    if (!filepath) {\n      throw new Error('load and loadSync must pass a non-empty string');\n    }\n  }\n\n  load(filepath) {\n    return Promise.resolve().then(() => {\n      this.validateFilePath(filepath);\n      const absoluteFilePath = path.resolve(process.cwd(), filepath);\n      return cacheWrapper(this.loadCache, absoluteFilePath, () => {\n        return readFile(absoluteFilePath, {\n          throwNotFound: true\n        }).then(content => {\n          return this.createCosmiconfigResult(absoluteFilePath, content);\n        }).then(this.config.transform);\n      });\n    });\n  }\n\n  loadSync(filepath) {\n    this.validateFilePath(filepath);\n    const absoluteFilePath = path.resolve(process.cwd(), filepath);\n    return cacheWrapper(this.loadSyncCache, absoluteFilePath, () => {\n      const content = readFile.sync(absoluteFilePath, {\n        throwNotFound: true\n      });\n      const result = this.createCosmiconfigResultSync(absoluteFilePath, content);\n      return this.config.transform(result);\n    });\n  }\n\n}\n\nmodule.exports = function createExplorer(options) {\n  const explorer = new Explorer(options);\n  return {\n    search: explorer.search.bind(explorer),\n    searchSync: explorer.searchSync.bind(explorer),\n    load: explorer.load.bind(explorer),\n    loadSync: explorer.loadSync.bind(explorer),\n    clearLoadCache: explorer.clearLoadCache.bind(explorer),\n    clearSearchCache: explorer.clearSearchCache.bind(explorer),\n    clearCaches: explorer.clearCaches.bind(explorer)\n  };\n};\n\nfunction nextDirUp(dir) {\n  return path.dirname(dir);\n}\n\nfunction getExtensionDescription(filepath) {\n  const ext = path.extname(filepath);\n  return ext ? `extension \"${ext}\"` : 'files without extensions';\n}","map":{"version":3,"names":["path","require","loaders","readFile","cacheWrapper","getDirectory","getPropertyByPath","MODE_SYNC","Explorer","constructor","options","loadCache","cache","Map","loadSyncCache","searchCache","searchSyncCache","config","validateConfig","clearLoadCache","clear","clearSearchCache","clearCaches","searchPlaces","forEach","place","loaderKey","extname","loader","Error","getExtensionDescription","search","searchFrom","process","cwd","then","dir","searchFromDirectory","absoluteDir","resolve","run","searchDirectory","result","nextDir","nextDirectoryToSearch","transform","searchSync","sync","searchFromDirectorySync","searchDirectorySync","reduce","prevResultPromise","prevResult","shouldSearchStopWithResult","loadSearchPlace","Promise","loadSearchPlaceSync","isEmpty","ignoreEmptySearchPlaces","filepath","join","content","createCosmiconfigResult","createCosmiconfigResultSync","currentDir","currentResult","nextDirUp","stopDir","loadPackageProp","parsedContent","loadJson","packagePropValue","packageProp","getLoaderEntryForFile","basename","bind","async","getSyncLoaderForFile","entry","getAsyncLoaderForFile","loadFileContent","mode","trim","undefined","loadedContentToCosmiconfigResult","loadedContent","loaderResult","validateFilePath","load","absoluteFilePath","throwNotFound","loadSync","module","exports","createExplorer","explorer","dirname","ext"],"sources":["/Users/anubhavgupta/Documents/react_learning/graphql-react/relay-learning/node_modules/babel-plugin-relay/node_modules/cosmiconfig/dist/createExplorer.js"],"sourcesContent":["//      \n'use strict';\n\nconst path = require('path');\nconst loaders = require('./loaders');\nconst readFile = require('./readFile');\nconst cacheWrapper = require('./cacheWrapper');\nconst getDirectory = require('./getDirectory');\nconst getPropertyByPath = require('./getPropertyByPath');\n\nconst MODE_SYNC = 'sync';\n\n// An object value represents a config object.\n// null represents that the loader did not find anything relevant.\n// undefined represents that the loader found something relevant\n// but it was empty.\n                                              \n\nclass Explorer {\n                                                      \n                                                 \n                                                        \n                                                   \n                          \n\n  constructor(options                 ) {\n    this.loadCache = options.cache ? new Map() : null;\n    this.loadSyncCache = options.cache ? new Map() : null;\n    this.searchCache = options.cache ? new Map() : null;\n    this.searchSyncCache = options.cache ? new Map() : null;\n    this.config = options;\n    this.validateConfig();\n  }\n\n  clearLoadCache() {\n    if (this.loadCache) {\n      this.loadCache.clear();\n    }\n    if (this.loadSyncCache) {\n      this.loadSyncCache.clear();\n    }\n  }\n\n  clearSearchCache() {\n    if (this.searchCache) {\n      this.searchCache.clear();\n    }\n    if (this.searchSyncCache) {\n      this.searchSyncCache.clear();\n    }\n  }\n\n  clearCaches() {\n    this.clearLoadCache();\n    this.clearSearchCache();\n  }\n\n  validateConfig() {\n    const config = this.config;\n\n    config.searchPlaces.forEach(place => {\n      const loaderKey = path.extname(place) || 'noExt';\n      const loader = config.loaders[loaderKey];\n      if (!loader) {\n        throw new Error(\n          `No loader specified for ${getExtensionDescription(\n            place\n          )}, so searchPlaces item \"${place}\" is invalid`\n        );\n      }\n    });\n  }\n\n  search(searchFrom         )                             {\n    searchFrom = searchFrom || process.cwd();\n    return getDirectory(searchFrom).then(dir => {\n      return this.searchFromDirectory(dir);\n    });\n  }\n\n  searchFromDirectory(dir        )                             {\n    const absoluteDir = path.resolve(process.cwd(), dir);\n    const run = () => {\n      return this.searchDirectory(absoluteDir).then(result => {\n        const nextDir = this.nextDirectoryToSearch(absoluteDir, result);\n        if (nextDir) {\n          return this.searchFromDirectory(nextDir);\n        }\n        return this.config.transform(result);\n      });\n    };\n\n    if (this.searchCache) {\n      return cacheWrapper(this.searchCache, absoluteDir, run);\n    }\n    return run();\n  }\n\n  searchSync(searchFrom         )                    {\n    searchFrom = searchFrom || process.cwd();\n    const dir = getDirectory.sync(searchFrom);\n    return this.searchFromDirectorySync(dir);\n  }\n\n  searchFromDirectorySync(dir        )                    {\n    const absoluteDir = path.resolve(process.cwd(), dir);\n    const run = () => {\n      const result = this.searchDirectorySync(absoluteDir);\n      const nextDir = this.nextDirectoryToSearch(absoluteDir, result);\n      if (nextDir) {\n        return this.searchFromDirectorySync(nextDir);\n      }\n      return this.config.transform(result);\n    };\n\n    if (this.searchSyncCache) {\n      return cacheWrapper(this.searchSyncCache, absoluteDir, run);\n    }\n    return run();\n  }\n\n  searchDirectory(dir        )                             {\n    return this.config.searchPlaces.reduce((prevResultPromise, place) => {\n      return prevResultPromise.then(prevResult => {\n        if (this.shouldSearchStopWithResult(prevResult)) {\n          return prevResult;\n        }\n        return this.loadSearchPlace(dir, place);\n      });\n    }, Promise.resolve(null));\n  }\n\n  searchDirectorySync(dir        )                    {\n    let result = null;\n    for (const place of this.config.searchPlaces) {\n      result = this.loadSearchPlaceSync(dir, place);\n      if (this.shouldSearchStopWithResult(result)) break;\n    }\n    return result;\n  }\n\n  shouldSearchStopWithResult(result                   )          {\n    if (result === null) return false;\n    if (result.isEmpty && this.config.ignoreEmptySearchPlaces) return false;\n    return true;\n  }\n\n  loadSearchPlace(dir        , place        )                             {\n    const filepath = path.join(dir, place);\n    return readFile(filepath).then(content => {\n      return this.createCosmiconfigResult(filepath, content);\n    });\n  }\n\n  loadSearchPlaceSync(dir        , place        )                    {\n    const filepath = path.join(dir, place);\n    const content = readFile.sync(filepath);\n    return this.createCosmiconfigResultSync(filepath, content);\n  }\n\n  nextDirectoryToSearch(\n    currentDir        ,\n    currentResult                   \n  )          {\n    if (this.shouldSearchStopWithResult(currentResult)) {\n      return null;\n    }\n    const nextDir = nextDirUp(currentDir);\n    if (nextDir === currentDir || currentDir === this.config.stopDir) {\n      return null;\n    }\n    return nextDir;\n  }\n\n  loadPackageProp(filepath        , content        ) {\n    const parsedContent = loaders.loadJson(filepath, content);\n    const packagePropValue = getPropertyByPath(\n      parsedContent,\n      this.config.packageProp\n    );\n    return packagePropValue || null;\n  }\n\n  getLoaderEntryForFile(filepath        )              {\n    if (path.basename(filepath) === 'package.json') {\n      const loader = this.loadPackageProp.bind(this);\n      return { sync: loader, async: loader };\n    }\n\n    const loaderKey = path.extname(filepath) || 'noExt';\n    return this.config.loaders[loaderKey] || {};\n  }\n\n  getSyncLoaderForFile(filepath        )             {\n    const entry = this.getLoaderEntryForFile(filepath);\n    if (!entry.sync) {\n      throw new Error(\n        `No sync loader specified for ${getExtensionDescription(filepath)}`\n      );\n    }\n    return entry.sync;\n  }\n\n  getAsyncLoaderForFile(filepath        )              {\n    const entry = this.getLoaderEntryForFile(filepath);\n    const loader = entry.async || entry.sync;\n    if (!loader) {\n      throw new Error(\n        `No async loader specified for ${getExtensionDescription(filepath)}`\n      );\n    }\n    return loader;\n  }\n\n  loadFileContent(\n    mode                  ,\n    filepath        ,\n    content               \n  )                                                 {\n    if (content === null) {\n      return null;\n    }\n    if (content.trim() === '') {\n      return undefined;\n    }\n    const loader =\n      mode === MODE_SYNC\n        ? this.getSyncLoaderForFile(filepath)\n        : this.getAsyncLoaderForFile(filepath);\n    return loader(filepath, content);\n  }\n\n  loadedContentToCosmiconfigResult(\n    filepath        ,\n    loadedContent                   \n  )                    {\n    if (loadedContent === null) {\n      return null;\n    }\n    if (loadedContent === undefined) {\n      return { filepath, config: undefined, isEmpty: true };\n    }\n    return { config: loadedContent, filepath };\n  }\n\n  createCosmiconfigResult(\n    filepath        ,\n    content               \n  )                             {\n    return Promise.resolve()\n      .then(() => {\n        return this.loadFileContent('async', filepath, content);\n      })\n      .then(loaderResult => {\n        return this.loadedContentToCosmiconfigResult(filepath, loaderResult);\n      });\n  }\n\n  createCosmiconfigResultSync(\n    filepath        ,\n    content               \n  )                    {\n    const loaderResult = this.loadFileContent('sync', filepath, content);\n    return this.loadedContentToCosmiconfigResult(filepath, loaderResult);\n  }\n\n  validateFilePath(filepath         ) {\n    if (!filepath) {\n      throw new Error('load and loadSync must pass a non-empty string');\n    }\n  }\n\n  load(filepath        )                             {\n    return Promise.resolve().then(() => {\n      this.validateFilePath(filepath);\n      const absoluteFilePath = path.resolve(process.cwd(), filepath);\n      return cacheWrapper(this.loadCache, absoluteFilePath, () => {\n        return readFile(absoluteFilePath, { throwNotFound: true })\n          .then(content => {\n            return this.createCosmiconfigResult(absoluteFilePath, content);\n          })\n          .then(this.config.transform);\n      });\n    });\n  }\n\n  loadSync(filepath        )                    {\n    this.validateFilePath(filepath);\n    const absoluteFilePath = path.resolve(process.cwd(), filepath);\n    return cacheWrapper(this.loadSyncCache, absoluteFilePath, () => {\n      const content = readFile.sync(absoluteFilePath, { throwNotFound: true });\n      const result = this.createCosmiconfigResultSync(\n        absoluteFilePath,\n        content\n      );\n      return this.config.transform(result);\n    });\n  }\n}\n\nmodule.exports = function createExplorer(options                 ) {\n  const explorer = new Explorer(options);\n\n  return {\n    search: explorer.search.bind(explorer),\n    searchSync: explorer.searchSync.bind(explorer),\n    load: explorer.load.bind(explorer),\n    loadSync: explorer.loadSync.bind(explorer),\n    clearLoadCache: explorer.clearLoadCache.bind(explorer),\n    clearSearchCache: explorer.clearSearchCache.bind(explorer),\n    clearCaches: explorer.clearCaches.bind(explorer),\n  };\n};\n\nfunction nextDirUp(dir        )         {\n  return path.dirname(dir);\n}\n\nfunction getExtensionDescription(filepath        )         {\n  const ext = path.extname(filepath);\n  return ext ? `extension \"${ext}\"` : 'files without extensions';\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}