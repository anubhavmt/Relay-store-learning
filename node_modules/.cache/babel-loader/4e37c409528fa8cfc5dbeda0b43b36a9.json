{"ast":null,"code":"var _ApprootQuery,\n    _ApprootupdateBookQuery,\n    _jsxFileName = \"/Users/anubhavgupta/Documents/react_learning/graphql-react/relay-store-learning/src/Approot.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport App from \"./App\";\nimport { useLazyLoadQuery, useMutation } from \"react-relay/hooks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst appquery = _ApprootQuery !== void 0 ? _ApprootQuery : (_ApprootQuery = require(\"./__generated__/ApprootQuery.graphql\"), _ApprootQuery.hash && _ApprootQuery.hash !== \"938e991c903a95d18e0391148e59f080\" && console.error(\"The definition of 'ApprootQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\"), _ApprootQuery);\nconst appMutateupdatequery = _ApprootupdateBookQuery !== void 0 ? _ApprootupdateBookQuery : (_ApprootupdateBookQuery = require(\"./__generated__/ApprootupdateBookQuery.graphql\"), _ApprootupdateBookQuery.hash && _ApprootupdateBookQuery.hash !== \"8fc1418aa32e96ff0aa9a5de51ba20c8\" && console.error(\"The definition of 'ApprootupdateBookQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\"), _ApprootupdateBookQuery);\n\nfunction Approot(props) {\n  _s();\n\n  // const [key, setKey] = useState(0);\n  // const [refreshedQueryOptions, setRefreshedQueryOptions] = useState<\n  //   any | null\n  // >(null);\n  // const [commit] = useMutation<ApprootAddBookQuery>(appMutatequery);\n  const [commitupdate] = useMutation(appMutateupdatequery); // const refresh = useCallback(() => {\n  //   setRefreshedQueryOptions((prev: any) => ({\n  //     fetchkey: (prev?.fetchkey ?? 0) + 1,\n  //     fetchPolicy: \"network-only\",\n  //   }));\n  // }, []);\n\n  const data = useLazyLoadQuery(appquery, {} // refreshedQueryOptions\n  // { fetchPolicy: \"network-only\", fetchKey: key }\n  ); // console.log(data);\n\n  return /*#__PURE__*/_jsxDEV(React.Suspense, {\n    fallback: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading.....\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 31\n    }, this),\n    children: [/*#__PURE__*/_jsxDEV(App, {\n      books: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      onSubmit: e => {\n        e.preventDefault();\n        let update = {\n          id: e.target[0].value,\n          title: e.target[1].value\n        };\n        commitupdate({\n          variables: update,\n          onCompleted: (response, errors) => {\n            console.log(\"Response received from server.\"); // refresh();\n            // setKey(key + 1);  that also works but we want that only when update fetch key then  fetch it network only else store or netowkr\n          },\n          updater: store => {\n            console.log(store);\n            window.store = store;\n          },\n          onError: err => console.error(err)\n        });\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"fname\",\n        children: \"Book id:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"fname\",\n        placeholder: \"Type Book id\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 71\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"fname\",\n        children: \"Book title:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"fname\",\n        placeholder: \"Type Book title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 72\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Approot, \"pYFhDEvmUD2G05ruy1Hr91pOmE8=\", false, function () {\n  return [useMutation, useLazyLoadQuery];\n});\n\n_c = Approot;\nexport default Approot;\n\nvar _c;\n\n$RefreshReg$(_c, \"Approot\");","map":{"version":3,"names":["React","App","useLazyLoadQuery","useMutation","appquery","appMutateupdatequery","Approot","props","commitupdate","data","e","preventDefault","update","id","target","value","title","variables","onCompleted","response","errors","console","log","updater","store","window","onError","err","error"],"sources":["/Users/anubhavgupta/Documents/react_learning/graphql-react/relay-store-learning/src/Approot.tsx"],"sourcesContent":["import React, { useCallback, useState } from \"react\";\nimport App from \"./App\";\nimport { graphql } from \"babel-plugin-relay/macro\";\nimport { useLazyLoadQuery, useMutation } from \"react-relay/hooks\";\nimport { RecordSourceSelectorProxy, Store } from \"relay-runtime\";\nimport {\n  ApprootQuery,\n  ApprootQuery$data,\n  ApprootQuery$variables,\n} from \"./__generated__/ApprootQuery.graphql\";\nimport {\n  ApprootupdateBookQuery,\n  ApprootupdateBookQuery$variables,\n} from \"./__generated__/ApprootupdateBookQuery.graphql\";\n\nconst appquery = graphql`\n  # Queries in graphql tags must start with the module name ('App') and end with 'Query'. Got 'allbook' instead.\n  query ApprootQuery {\n    books {\n      id\n      ...App_detail\n    }\n  }\n`;\n\nconst appMutateupdatequery = graphql`\n  # Queries in graphql tags must start with the module name ('App') and end with 'Query'. Got 'allbook' instead.\n\n  mutation ApprootupdateBookQuery($id: ID!, $title: String!) {\n    updateBook(bookId: $id, title: $title) {\n      id\n      ...App_detail\n    }\n  }\n`;\n\nfunction Approot(props: any) {\n  // const [key, setKey] = useState(0);\n  // const [refreshedQueryOptions, setRefreshedQueryOptions] = useState<\n  //   any | null\n  // >(null);\n  // const [commit] = useMutation<ApprootAddBookQuery>(appMutatequery);\n  const [commitupdate] =\n    useMutation<ApprootupdateBookQuery>(appMutateupdatequery);\n\n  // const refresh = useCallback(() => {\n  //   setRefreshedQueryOptions((prev: any) => ({\n  //     fetchkey: (prev?.fetchkey ?? 0) + 1,\n  //     fetchPolicy: \"network-only\",\n  //   }));\n  // }, []);\n\n  const data = useLazyLoadQuery<ApprootQuery>(\n    appquery,\n    {}\n    // refreshedQueryOptions\n    // { fetchPolicy: \"network-only\", fetchKey: key }\n  );\n\n  // console.log(data);\n\n  return (\n    <React.Suspense fallback={<div>Loading.....</div>}>\n      <App books={data} />\n      <form\n        className=\"form\"\n        onSubmit={(e: any) => {\n          e.preventDefault();\n\n          let update: ApprootupdateBookQuery$variables = {\n            id: e.target[0].value,\n            title: e.target[1].value,\n          };\n\n          commitupdate({\n            variables: update,\n            onCompleted: (response, errors) => {\n              console.log(\"Response received from server.\");\n\n              // refresh();\n              // setKey(key + 1);  that also works but we want that only when update fetch key then  fetch it network only else store or netowkr\n            },\n            updater: (store: RecordSourceSelectorProxy) => {\n              console.log(store);\n              (window as any).store = store;\n            },\n            onError: (err) => console.error(err),\n          });\n        }}\n      >\n        <label htmlFor=\"fname\">Book id:</label>\n        <input type=\"number\" id=\"fname\" placeholder=\"Type Book id\" /> <br></br>\n        <label htmlFor=\"fname\">Book title:</label>\n        <input type=\"text\" id=\"fname\" placeholder=\"Type Book title\" /> <br></br>\n        {/* <label htmlFor=\"fname\">Author FirstName:</label>\n        <input type=\"text\" id=\"fname\" placeholder=\"type author first name\" />\n        <br></br>\n        <label htmlFor=\"fname\">Author LastName:</label>\n        <input type=\"text\" id=\"fname\" placeholder=\"Type author lastname\" /> */}\n        {/* <br></br> */}\n        <input type=\"submit\" />\n      </form>\n    </React.Suspense>\n  );\n}\n\nexport default Approot;\n"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAA6C,OAA7C;AACA,OAAOC,GAAP,MAAgB,OAAhB;AAEA,SAASC,gBAAT,EAA2BC,WAA3B,QAA8C,mBAA9C;;AAYA,MAAMC,QAAQ,8WAAd;AAUA,MAAMC,oBAAoB,8bAA1B;;AAWA,SAASC,OAAT,CAAiBC,KAAjB,EAA6B;EAAA;;EAC3B;EACA;EACA;EACA;EACA;EACA,MAAM,CAACC,YAAD,IACJL,WAAW,CAAyBE,oBAAzB,CADb,CAN2B,CAS3B;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMI,IAAI,GAAGP,gBAAgB,CAC3BE,QAD2B,EAE3B,EAF2B,CAG3B;EACA;EAJ2B,CAA7B,CAhB2B,CAuB3B;;EAEA,oBACE,QAAC,KAAD,CAAO,QAAP;IAAgB,QAAQ,eAAE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAA1B;IAAA,wBACE,QAAC,GAAD;MAAK,KAAK,EAAEK;IAAZ;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MACE,SAAS,EAAC,MADZ;MAEE,QAAQ,EAAGC,CAAD,IAAY;QACpBA,CAAC,CAACC,cAAF;QAEA,IAAIC,MAAwC,GAAG;UAC7CC,EAAE,EAAEH,CAAC,CAACI,MAAF,CAAS,CAAT,EAAYC,KAD6B;UAE7CC,KAAK,EAAEN,CAAC,CAACI,MAAF,CAAS,CAAT,EAAYC;QAF0B,CAA/C;QAKAP,YAAY,CAAC;UACXS,SAAS,EAAEL,MADA;UAEXM,WAAW,EAAE,CAACC,QAAD,EAAWC,MAAX,KAAsB;YACjCC,OAAO,CAACC,GAAR,CAAY,gCAAZ,EADiC,CAGjC;YACA;UACD,CAPU;UAQXC,OAAO,EAAGC,KAAD,IAAsC;YAC7CH,OAAO,CAACC,GAAR,CAAYE,KAAZ;YACCC,MAAD,CAAgBD,KAAhB,GAAwBA,KAAxB;UACD,CAXU;UAYXE,OAAO,EAAGC,GAAD,IAASN,OAAO,CAACO,KAAR,CAAcD,GAAd;QAZP,CAAD,CAAZ;MAcD,CAxBH;MAAA,wBA0BE;QAAO,OAAO,EAAC,OAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QA1BF,eA2BE;QAAO,IAAI,EAAC,QAAZ;QAAqB,EAAE,EAAC,OAAxB;QAAgC,WAAW,EAAC;MAA5C;QAAA;QAAA;QAAA;MAAA,QA3BF,oBA2BgE;QAAA;QAAA;QAAA;MAAA,QA3BhE,eA4BE;QAAO,OAAO,EAAC,OAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QA5BF,eA6BE;QAAO,IAAI,EAAC,MAAZ;QAAmB,EAAE,EAAC,OAAtB;QAA8B,WAAW,EAAC;MAA1C;QAAA;QAAA;QAAA;MAAA,QA7BF,oBA6BiE;QAAA;QAAA;QAAA;MAAA,QA7BjE,eAoCE;QAAO,IAAI,EAAC;MAAZ;QAAA;QAAA;QAAA;MAAA,QApCF;IAAA;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AA2CD;;GApEQrB,O;UAOLH,W,EASWD,gB;;;KAhBNI,O;AAsET,eAAeA,OAAf"},"metadata":{},"sourceType":"module"}