{"ast":null,"code":"var _ApprootQuery,\n    _ApprootupdateBookQuery,\n    _jsxFileName = \"/Users/anubhavgupta/Documents/react_learning/graphql-react/relay-store-learning/src/Approot.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport App from \"./App\";\nimport { useLazyLoadQuery, useMutation, useRelayEnvironment } from \"react-relay/hooks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst appquery = _ApprootQuery !== void 0 ? _ApprootQuery : (_ApprootQuery = require(\"./__generated__/ApprootQuery.graphql\"), _ApprootQuery.hash && _ApprootQuery.hash !== \"938e991c903a95d18e0391148e59f080\" && console.error(\"The definition of 'ApprootQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\"), _ApprootQuery);\nconst appMutateupdatequery = _ApprootupdateBookQuery !== void 0 ? _ApprootupdateBookQuery : (_ApprootupdateBookQuery = require(\"./__generated__/ApprootupdateBookQuery.graphql\"), _ApprootupdateBookQuery.hash && _ApprootupdateBookQuery.hash !== \"aecc280cb9a2b888276e1b2838ab4522\" && console.error(\"The definition of 'ApprootupdateBookQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\"), _ApprootupdateBookQuery);\n\nfunction Approot(props) {\n  _s();\n\n  const [commitupdate] = useMutation(appMutateupdatequery);\n  const data = useLazyLoadQuery(appquery, {}, {\n    fetchPolicy: 'store-or-network'\n  });\n  console.log(\"approot......\");\n  console.log(data);\n  /*\n   The useRelayEnvironment().getStore() function returns a Store object from the Relay Modern library. The type of object returned depends on the method called on the Store object.\n   Calling getStore().getSource() returns a RecordSource object, which is an interface for reading and writing records in the store.\n   Calling getStore().getSource().get(<dataID>) returns a RecordProxy object, which is a mutable interface for a single record in the store with the specified dataID.\n   Calling getStore().getSource().get(<selector>) returns a RecordSourceSelectorProxy object, which is a mutable interface for a set of records in the store that match the specified selector.\n   So, depending on which method is called on the Store object, the returned type could be either a RecordProxy or a RecordSourceSelectorProxy.\n   */\n\n  /*\n   Doc refering: \n   */\n\n  console.log(\"Type: RecordSourceSelectorProxy\");\n  console.log(useRelayEnvironment().getStore()); // console.log(typeof useRelayEnvironment().getStore().getSource())\n  // console.log(useRelayEnvironment().getStore().getSource())\n  // console.log(typeof useRelayEnvironment().getStore().getSource().get(\"1\"))\n  // console.log(useRelayEnvironment().getStore().getSource().get(\"1\"))\n  // console.log(typeof useRelayEnvironment().getStore().getSource().getRecordIDs())\n  // console.log(useRelayEnvironment().getStore().getSource().getRecordIDs())\n\n  return /*#__PURE__*/_jsxDEV(React.Suspense, {\n    fallback: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading.....\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 31\n    }, this),\n    children: [/*#__PURE__*/_jsxDEV(App, {\n      books: data.books[0]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      onSubmit: e => {\n        e.preventDefault();\n        let update = {\n          id: e.target[0].value,\n          book: {\n            id: e.target[0].value,\n            title: e.target[1].value,\n            author: {\n              id: e.target[2].value,\n              firstname: e.target[3].value,\n              secondname: e.target[4].value\n            }\n          }\n        };\n        commitupdate({\n          variables: update,\n          onCompleted: (response, errors) => {\n            console.log(\"Response received from server.\");\n          },\n          updater: store => {\n            console.log(\"in mutaiton\");\n            console.log(store);\n            window.store = store;\n          },\n          onError: err => console.error(err)\n        });\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"fname\",\n        children: \"Book id:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"fname\",\n        placeholder: \"Type Book id\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 71\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"fname\",\n        children: \"Book title:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"fname\",\n        placeholder: \"Type Book title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 72\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"fname\",\n        children: \"This author id:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"fname\",\n        placeholder: \"Type Book title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 72\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"fname\",\n        children: \"Author firstname:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"fname\",\n        placeholder: \"Type Book title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 72\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"fname\",\n        children: \"Author secondname:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"fname\",\n        placeholder: \"Type Book title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 72\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Approot, \"YvL7/Tn9M7Yu9Ev+mbY39BdcYIM=\", false, function () {\n  return [useMutation, useLazyLoadQuery, useRelayEnvironment];\n});\n\n_c = Approot;\nexport default Approot;\n\nvar _c;\n\n$RefreshReg$(_c, \"Approot\");","map":{"version":3,"names":["React","App","useLazyLoadQuery","useMutation","useRelayEnvironment","appquery","appMutateupdatequery","Approot","props","commitupdate","data","fetchPolicy","console","log","getStore","books","e","preventDefault","update","id","target","value","book","title","author","firstname","secondname","variables","onCompleted","response","errors","updater","store","window","onError","err","error"],"sources":["/Users/anubhavgupta/Documents/react_learning/graphql-react/relay-store-learning/src/Approot.tsx"],"sourcesContent":["import React, { useCallback, useState } from \"react\";\nimport App from \"./App\";\nimport { graphql } from \"babel-plugin-relay/macro\";\nimport { useLazyLoadQuery, useMutation, useRelayEnvironment } from \"react-relay/hooks\";\nimport { RecordSourceSelectorProxy, Store } from \"relay-runtime\";\nimport {\n  ApprootQuery,\n  ApprootQuery$data,\n  ApprootQuery$variables,\n} from \"./__generated__/ApprootQuery.graphql\";\nimport {\n  ApprootupdateBookQuery,\n  ApprootupdateBookQuery$variables,\n} from \"./__generated__/ApprootupdateBookQuery.graphql\";\n\nconst appquery = graphql`\n  # Queries in graphql tags must start with the module name ('App') and end with 'Query'. Got 'allbook' instead.\n  query ApprootQuery {\n    books {\n      id\n      ...App_detail\n    }\n  }\n`;\n\nconst appMutateupdatequery = graphql`\n  # Queries in graphql tags must start with the module name ('App') and end with 'Query'. Got 'allbook' instead.\n\n  mutation ApprootupdateBookQuery($id: ID!, $book: bookInput!) {\n    updateBook(bookId: $id, book: $book) {\n      id\n      ...App_detail\n    }\n  }\n`;\n\nfunction Approot(props: any) {\n  const [commitupdate] = useMutation<ApprootupdateBookQuery>(appMutateupdatequery);\n\n  const data = useLazyLoadQuery<ApprootQuery>(appquery, {},{fetchPolicy: 'store-or-network'});\n  console.log(\"approot......\")\n  console.log(data);\n\n\n\n  /*\n\n  The useRelayEnvironment().getStore() function returns a Store object from the Relay Modern library. The type of object returned depends on the method called on the Store object.\n\n  Calling getStore().getSource() returns a RecordSource object, which is an interface for reading and writing records in the store.\n\n  Calling getStore().getSource().get(<dataID>) returns a RecordProxy object, which is a mutable interface for a single record in the store with the specified dataID.\n\n  Calling getStore().getSource().get(<selector>) returns a RecordSourceSelectorProxy object, which is a mutable interface for a set of records in the store that match the specified selector.\n\n  So, depending on which method is called on the Store object, the returned type could be either a RecordProxy or a RecordSourceSelectorProxy.\n\n  */\n\n  /*\n\n  Doc refering: \n\n  */\n  console.log(\"Type: RecordSourceSelectorProxy\")\n  console.log(useRelayEnvironment().getStore())\n  // console.log(typeof useRelayEnvironment().getStore().getSource())\n  // console.log(useRelayEnvironment().getStore().getSource())\n  // console.log(typeof useRelayEnvironment().getStore().getSource().get(\"1\"))\n  // console.log(useRelayEnvironment().getStore().getSource().get(\"1\"))\n  // console.log(typeof useRelayEnvironment().getStore().getSource().getRecordIDs())\n  // console.log(useRelayEnvironment().getStore().getSource().getRecordIDs())\n\n  return (\n    <React.Suspense fallback={<div>Loading.....</div>}>\n      <App books={data.books[0]} />\n      <form\n        className=\"form\"\n        onSubmit={(e: any) => {\n          e.preventDefault();\n\n          let update: any = {\n            id: e.target[0].value,\n            book:{\n              id: e.target[0].value,\n              title: e.target[1].value,\n              author: {\n                id: e.target[2].value,\n                firstname: e.target[3].value,\n                secondname: e.target[4].value\n              }\n            }\n          };\n\n          commitupdate({\n            variables: update,\n            onCompleted: (response, errors) => {\n              console.log(\"Response received from server.\");\n            },\n            updater: (store) => {\n\n              console.log(\"in mutaiton\");\n              console.log(store);\n              \n\n              (window as any).store = store;\n            },\n            onError: (err) => console.error(err),\n          });\n        }}\n      >\n        <label htmlFor=\"fname\">Book id:</label>\n        <input type=\"number\" id=\"fname\" placeholder=\"Type Book id\" /> <br></br>\n        <label htmlFor=\"fname\">Book title:</label>\n        <input type=\"text\" id=\"fname\" placeholder=\"Type Book title\" /> <br></br>\n        <label htmlFor=\"fname\">This author id:</label>\n        <input type=\"text\" id=\"fname\" placeholder=\"Type Book title\" /> <br></br>\n        <label htmlFor=\"fname\">Author firstname:</label>\n        <input type=\"text\" id=\"fname\" placeholder=\"Type Book title\" /> <br></br>\n        <label htmlFor=\"fname\">Author secondname:</label>\n        <input type=\"text\" id=\"fname\" placeholder=\"Type Book title\" /> <br></br>\n        <input type=\"submit\" />\n      </form>\n    </React.Suspense>\n  );\n}\n\nexport default Approot;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}