{"ast":null,"code":"var _ApprootQuery,\n    _ApprootAddBookQuery,\n    _jsxFileName = \"/Users/anubhavgupta/Documents/react_learning/graphql-react/relay-learning-doc/lazyquery_mutation/src/Approot.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState } from \"react\";\nimport App from \"./App\";\nimport { useLazyLoadQuery, useMutation } from \"react-relay\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst appquery = _ApprootQuery !== void 0 ? _ApprootQuery : (_ApprootQuery = require(\"./__generated__/ApprootQuery.graphql\"), _ApprootQuery.hash && _ApprootQuery.hash !== \"864bcf0eacbb5308b3ee89bb00f1fab1\" && console.error(\"The definition of 'ApprootQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\"), _ApprootQuery);\nconst appMutatequery = _ApprootAddBookQuery !== void 0 ? _ApprootAddBookQuery : (_ApprootAddBookQuery = require(\"./__generated__/ApprootAddBookQuery.graphql\"), _ApprootAddBookQuery.hash && _ApprootAddBookQuery.hash !== \"eb7b9d81ad8f63ba516e551936327d03\" && console.error(\"The definition of 'ApprootAddBookQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\"), _ApprootAddBookQuery);\n\nfunction Approot(props) {\n  _s();\n\n  const [key, setKey] = useState(0);\n  const [refreshedQueryOptions, setRefreshedQueryOptions] = useState(null);\n  const [commit] = useMutation(appMutatequery);\n  const refresh = useCallback(() => {\n    setRefreshedQueryOptions(prev => {\n      var _prev$fetchkey;\n\n      return {\n        fetchkey: ((_prev$fetchkey = prev === null || prev === void 0 ? void 0 : prev.fetchkey) !== null && _prev$fetchkey !== void 0 ? _prev$fetchkey : 0) + 1,\n        fetchPolicy: \"network-only\"\n      };\n    });\n  }, []);\n  const data = useLazyLoadQuery(appquery, {} // { fetchPolicy: \"network-only\", fetchKey: key }\n  );\n  console.log(data);\n  return /*#__PURE__*/_jsxDEV(React.Suspense, {\n    fallback: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading.....\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 31\n    }, this),\n    children: [/*#__PURE__*/_jsxDEV(App, {\n      books: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      onSubmit: e => {\n        e.preventDefault();\n        let sampeBook = {\n          title: e.target[0].value,\n          author: {\n            firstname: e.target[1].value,\n            secondname: e.target[2].value\n          }\n        };\n        let update = {\n          book: sampeBook\n        }; // let optimisticResponse = {\n        //   title: e.target[0].value,\n        //   author: {\n        //     firstname: e.target[1].value,\n        //     secondname: e.target[2].value,\n        //   },\n        // };\n\n        commit({\n          variables: update,\n          onCompleted: (response, errors) => {\n            console.log(\"Response received from server.\"); // setKey(key + 1);  that also works but we want that only when update fetch key then  fetch it network only else store or netowkr\n          },\n          onError: err => console.error(err)\n        }); // working\n        // commitMutation(environment, {\n        //   mutation: appMutatequery,\n        //   variables: { book: sampeBook },\n        //   onCompleted: (response, errors) => {\n        //     console.log(\"Response received from server.\");\n        //     setKey(key + 1);\n        //     // setTimeout(() => setKey(key + 1), 3000);\n        //   },\n        //   onError: (err) => console.error(err),\n        //   // optimisticResponse,\n        // });\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"fname\",\n        children: \"Book title:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"fname\",\n        placeholder: \"Type Book title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 72\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"fname\",\n        children: \"Author FirstName:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"fname\",\n        placeholder: \"type author first name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"fname\",\n        children: \"Author LastName:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"fname\",\n        placeholder: \"Type author lastname\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Approot, \"amoOYPXP8KXhUP/1ExkCocUvdWM=\", false, function () {\n  return [useMutation, useLazyLoadQuery];\n});\n\n_c = Approot;\nexport default Approot;\n\nvar _c;\n\n$RefreshReg$(_c, \"Approot\");","map":{"version":3,"names":["React","useCallback","useState","App","useLazyLoadQuery","useMutation","appquery","appMutatequery","Approot","props","key","setKey","refreshedQueryOptions","setRefreshedQueryOptions","commit","refresh","prev","fetchkey","fetchPolicy","data","console","log","e","preventDefault","sampeBook","title","target","value","author","firstname","secondname","update","book","variables","onCompleted","response","errors","onError","err","error"],"sources":["/Users/anubhavgupta/Documents/react_learning/graphql-react/relay-learning-doc/lazyquery_mutation/src/Approot.tsx"],"sourcesContent":["import React, { useCallback, useState } from \"react\";\nimport App from \"./App\";\nimport { graphql } from \"babel-plugin-relay/macro\";\nimport { useLazyLoadQuery, commitMutation, useMutation } from \"react-relay\";\nimport Author from \"./Author\";\nimport { ApprootQuery } from \"./__generated__/ApprootQuery.graphql\";\nimport { bookInput } from \"./__generated__/AppAddBookQuery.graphql\";\nimport { ApprootAddBookQuery } from \"./__generated__/ApprootAddBookQuery.graphql\";\nimport { ApprootAddBookQuery$variables } from \"./__generated__/ApprootAddBookQuery.graphql\";\nimport environment from \"./RelayEnvironment\";\n\nconst appquery = graphql`\n  # Queries in graphql tags must start with the module name ('App') and end with 'Query'. Got 'allbook' instead.\n  query ApprootQuery {\n    ...App_detail\n  }\n`;\n\nconst appMutatequery = graphql`\n  # Queries in graphql tags must start with the module name ('App') and end with 'Query'. Got 'allbook' instead.\n\n  mutation ApprootAddBookQuery($book: bookInput!) {\n    addBook(book: $book) {\n      title\n      author {\n        ...Author_detail\n      }\n      # title\n    }\n  }\n`;\ninterface hoo {\n  fetchkey: Number;\n  fetchPolich: String;\n}\n\nfunction Approot(props: any) {\n  const [key, setKey] = useState(0);\n  const [refreshedQueryOptions, setRefreshedQueryOptions] = useState<\n    any | null\n  >(null);\n  const [commit] = useMutation<ApprootAddBookQuery>(appMutatequery);\n\n  const refresh = useCallback(() => {\n    setRefreshedQueryOptions((prev) => ({\n      fetchkey: (prev?.fetchkey ?? 0) + 1,\n      fetchPolicy: \"network-only\",\n    }));\n  }, []);\n\n  const data = useLazyLoadQuery<ApprootQuery>(\n    appquery,\n    {}\n    // { fetchPolicy: \"network-only\", fetchKey: key }\n  );\n\n  console.log(data);\n\n  return (\n    <React.Suspense fallback={<div>Loading.....</div>}>\n      <App books={data} />\n      <form\n        className=\"form\"\n        onSubmit={(e: any) => {\n          e.preventDefault();\n          let sampeBook: bookInput = {\n            title: e.target[0].value,\n            author: {\n              firstname: e.target[1].value,\n              secondname: e.target[2].value,\n            },\n          };\n          let update: ApprootAddBookQuery$variables = {\n            book: sampeBook,\n          };\n          // let optimisticResponse = {\n          //   title: e.target[0].value,\n          //   author: {\n          //     firstname: e.target[1].value,\n          //     secondname: e.target[2].value,\n          //   },\n          // };\n\n          commit({\n            variables: update,\n            onCompleted: (response, errors) => {\n              console.log(\"Response received from server.\");\n              // setKey(key + 1);  that also works but we want that only when update fetch key then  fetch it network only else store or netowkr\n            },\n            onError: (err) => console.error(err),\n          });\n\n          // working\n\n          // commitMutation(environment, {\n          //   mutation: appMutatequery,\n          //   variables: { book: sampeBook },\n          //   onCompleted: (response, errors) => {\n          //     console.log(\"Response received from server.\");\n          //     setKey(key + 1);\n          //     // setTimeout(() => setKey(key + 1), 3000);\n          //   },\n          //   onError: (err) => console.error(err),\n          //   // optimisticResponse,\n          // });\n        }}\n      >\n        <label htmlFor=\"fname\">Book title:</label>\n        <input type=\"text\" id=\"fname\" placeholder=\"Type Book title\" /> <br></br>\n        <label htmlFor=\"fname\">Author FirstName:</label>\n        <input type=\"text\" id=\"fname\" placeholder=\"type author first name\" />\n        <br></br>\n        <label htmlFor=\"fname\">Author LastName:</label>\n        <input type=\"text\" id=\"fname\" placeholder=\"Type author lastname\" />\n        <br></br>\n        <input type=\"submit\" />\n      </form>\n    </React.Suspense>\n  );\n}\n\nexport default Approot;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}