{"ast":null,"code":"import { syntaxError } from \"../error/syntaxError.mjs\";\nimport { Token } from \"./ast.mjs\";\nimport { TokenKind } from \"./tokenKind.mjs\";\nimport { dedentBlockStringValue } from \"./blockString.mjs\";\n/**\n * Given a Source object, creates a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport var Lexer = /*#__PURE__*/function () {\n  /**\n   * The previously focused non-ignored token.\n   */\n\n  /**\n   * The currently focused non-ignored token.\n   */\n\n  /**\n   * The (1-indexed) line containing the current token.\n   */\n\n  /**\n   * The character offset at which the current line begins.\n   */\n  function Lexer(source) {\n    var startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0, null);\n    this.source = source;\n    this.lastToken = startOfFileToken;\n    this.token = startOfFileToken;\n    this.line = 1;\n    this.lineStart = 0;\n  }\n  /**\n   * Advances the token stream to the next non-ignored token.\n   */\n\n\n  var _proto = Lexer.prototype;\n\n  _proto.advance = function advance() {\n    this.lastToken = this.token;\n    var token = this.token = this.lookahead();\n    return token;\n  }\n  /**\n   * Looks ahead and returns the next non-ignored token, but does not change\n   * the state of Lexer.\n   */\n  ;\n\n  _proto.lookahead = function lookahead() {\n    var token = this.token;\n\n    if (token.kind !== TokenKind.EOF) {\n      do {\n        var _token$next; // Note: next is only mutable during parsing, so we cast to allow this.\n\n\n        token = (_token$next = token.next) !== null && _token$next !== void 0 ? _token$next : token.next = readToken(this, token);\n      } while (token.kind === TokenKind.COMMENT);\n    }\n\n    return token;\n  };\n\n  return Lexer;\n}();\n/**\n * @internal\n */\n\nexport function isPunctuatorTokenKind(kind) {\n  return kind === TokenKind.BANG || kind === TokenKind.DOLLAR || kind === TokenKind.AMP || kind === TokenKind.PAREN_L || kind === TokenKind.PAREN_R || kind === TokenKind.SPREAD || kind === TokenKind.COLON || kind === TokenKind.EQUALS || kind === TokenKind.AT || kind === TokenKind.BRACKET_L || kind === TokenKind.BRACKET_R || kind === TokenKind.BRACE_L || kind === TokenKind.PIPE || kind === TokenKind.BRACE_R;\n}\n\nfunction printCharCode(code) {\n  return (// NaN/undefined represents access beyond the end of the file.\n    isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.\n    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.\n    \"\\\"\\\\u\".concat(('00' + code.toString(16).toUpperCase()).slice(-4), \"\\\"\")\n  );\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\n\nfunction readToken(lexer, prev) {\n  var source = lexer.source;\n  var body = source.body;\n  var bodyLength = body.length;\n  var pos = positionAfterWhitespace(body, prev.end, lexer);\n  var line = lexer.line;\n  var col = 1 + pos - lexer.lineStart;\n\n  if (pos >= bodyLength) {\n    return new Token(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);\n  }\n\n  var code = body.charCodeAt(pos); // SourceCharacter\n\n  switch (code) {\n    // !\n    case 33:\n      return new Token(TokenKind.BANG, pos, pos + 1, line, col, prev);\n    // #\n\n    case 35:\n      return readComment(source, pos, line, col, prev);\n    // $\n\n    case 36:\n      return new Token(TokenKind.DOLLAR, pos, pos + 1, line, col, prev);\n    // &\n\n    case 38:\n      return new Token(TokenKind.AMP, pos, pos + 1, line, col, prev);\n    // (\n\n    case 40:\n      return new Token(TokenKind.PAREN_L, pos, pos + 1, line, col, prev);\n    // )\n\n    case 41:\n      return new Token(TokenKind.PAREN_R, pos, pos + 1, line, col, prev);\n    // .\n\n    case 46:\n      if (body.charCodeAt(pos + 1) === 46 && body.charCodeAt(pos + 2) === 46) {\n        return new Token(TokenKind.SPREAD, pos, pos + 3, line, col, prev);\n      }\n\n      break;\n    // :\n\n    case 58:\n      return new Token(TokenKind.COLON, pos, pos + 1, line, col, prev);\n    // =\n\n    case 61:\n      return new Token(TokenKind.EQUALS, pos, pos + 1, line, col, prev);\n    // @\n\n    case 64:\n      return new Token(TokenKind.AT, pos, pos + 1, line, col, prev);\n    // [\n\n    case 91:\n      return new Token(TokenKind.BRACKET_L, pos, pos + 1, line, col, prev);\n    // ]\n\n    case 93:\n      return new Token(TokenKind.BRACKET_R, pos, pos + 1, line, col, prev);\n    // {\n\n    case 123:\n      return new Token(TokenKind.BRACE_L, pos, pos + 1, line, col, prev);\n    // |\n\n    case 124:\n      return new Token(TokenKind.PIPE, pos, pos + 1, line, col, prev);\n    // }\n\n    case 125:\n      return new Token(TokenKind.BRACE_R, pos, pos + 1, line, col, prev);\n    // A-Z _ a-z\n\n    case 65:\n    case 66:\n    case 67:\n    case 68:\n    case 69:\n    case 70:\n    case 71:\n    case 72:\n    case 73:\n    case 74:\n    case 75:\n    case 76:\n    case 77:\n    case 78:\n    case 79:\n    case 80:\n    case 81:\n    case 82:\n    case 83:\n    case 84:\n    case 85:\n    case 86:\n    case 87:\n    case 88:\n    case 89:\n    case 90:\n    case 95:\n    case 97:\n    case 98:\n    case 99:\n    case 100:\n    case 101:\n    case 102:\n    case 103:\n    case 104:\n    case 105:\n    case 106:\n    case 107:\n    case 108:\n    case 109:\n    case 110:\n    case 111:\n    case 112:\n    case 113:\n    case 114:\n    case 115:\n    case 116:\n    case 117:\n    case 118:\n    case 119:\n    case 120:\n    case 121:\n    case 122:\n      return readName(source, pos, line, col, prev);\n    // - 0-9\n\n    case 45:\n    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n      return readNumber(source, pos, code, line, col, prev);\n    // \"\n\n    case 34:\n      if (body.charCodeAt(pos + 1) === 34 && body.charCodeAt(pos + 2) === 34) {\n        return readBlockString(source, pos, line, col, prev, lexer);\n      }\n\n      return readString(source, pos, line, col, prev);\n  }\n\n  throw syntaxError(source, pos, unexpectedCharacterMessage(code));\n}\n/**\n * Report a message that an unexpected character was encountered.\n */\n\n\nfunction unexpectedCharacterMessage(code) {\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n    return \"Cannot contain the invalid character \".concat(printCharCode(code), \".\");\n  }\n\n  if (code === 39) {\n    // '\n    return 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?';\n  }\n\n  return \"Cannot parse the unexpected character \".concat(printCharCode(code), \".\");\n}\n/**\n * Reads from body starting at startPosition until it finds a non-whitespace\n * character, then returns the position of that character for lexing.\n */\n\n\nfunction positionAfterWhitespace(body, startPosition, lexer) {\n  var bodyLength = body.length;\n  var position = startPosition;\n\n  while (position < bodyLength) {\n    var code = body.charCodeAt(position); // tab | space | comma | BOM\n\n    if (code === 9 || code === 32 || code === 44 || code === 0xfeff) {\n      ++position;\n    } else if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (body.charCodeAt(position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else {\n      break;\n    }\n  }\n\n  return position;\n}\n/**\n * Reads a comment token from the source file.\n *\n * #[\\u0009\\u0020-\\uFFFF]*\n */\n\n\nfunction readComment(source, start, line, col, prev) {\n  var body = source.body;\n  var code;\n  var position = start;\n\n  do {\n    code = body.charCodeAt(++position);\n  } while (!isNaN(code) && ( // SourceCharacter but not LineTerminator\n  code > 0x001f || code === 0x0009));\n\n  return new Token(TokenKind.COMMENT, start, position, line, col, prev, body.slice(start + 1, position));\n}\n/**\n * Reads a number token from the source file, either a float\n * or an int depending on whether a decimal point appears.\n *\n * Int:   -?(0|[1-9][0-9]*)\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?\n */\n\n\nfunction readNumber(source, start, firstCode, line, col, prev) {\n  var body = source.body;\n  var code = firstCode;\n  var position = start;\n  var isFloat = false;\n\n  if (code === 45) {\n    // -\n    code = body.charCodeAt(++position);\n  }\n\n  if (code === 48) {\n    // 0\n    code = body.charCodeAt(++position);\n\n    if (code >= 48 && code <= 57) {\n      throw syntaxError(source, position, \"Invalid number, unexpected digit after 0: \".concat(printCharCode(code), \".\"));\n    }\n  } else {\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 46) {\n    // .\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 69 || code === 101) {\n    // E e\n    isFloat = true;\n    code = body.charCodeAt(++position);\n\n    if (code === 43 || code === 45) {\n      // + -\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or NameStart\n\n\n  if (code === 46 || isNameStart(code)) {\n    throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n  }\n\n  return new Token(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, body.slice(start, position));\n}\n/**\n * Returns the new position in the source after reading digits.\n */\n\n\nfunction readDigits(source, start, firstCode) {\n  var body = source.body;\n  var position = start;\n  var code = firstCode;\n\n  if (code >= 48 && code <= 57) {\n    // 0 - 9\n    do {\n      code = body.charCodeAt(++position);\n    } while (code >= 48 && code <= 57); // 0 - 9\n\n\n    return position;\n  }\n\n  throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n}\n/**\n * Reads a string token from the source file.\n *\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"\n */\n\n\nfunction readString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 1;\n  var chunkStart = position;\n  var code = 0;\n  var value = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position)) && // not LineTerminator\n  code !== 0x000a && code !== 0x000d) {\n    // Closing Quote (\")\n    if (code === 34) {\n      value += body.slice(chunkStart, position);\n      return new Token(TokenKind.STRING, start, position + 1, line, col, prev, value);\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    ++position;\n\n    if (code === 92) {\n      // \\\n      value += body.slice(chunkStart, position - 1);\n      code = body.charCodeAt(position);\n\n      switch (code) {\n        case 34:\n          value += '\"';\n          break;\n\n        case 47:\n          value += '/';\n          break;\n\n        case 92:\n          value += '\\\\';\n          break;\n\n        case 98:\n          value += '\\b';\n          break;\n\n        case 102:\n          value += '\\f';\n          break;\n\n        case 110:\n          value += '\\n';\n          break;\n\n        case 114:\n          value += '\\r';\n          break;\n\n        case 116:\n          value += '\\t';\n          break;\n\n        case 117:\n          {\n            // uXXXX\n            var charCode = uniCharCode(body.charCodeAt(position + 1), body.charCodeAt(position + 2), body.charCodeAt(position + 3), body.charCodeAt(position + 4));\n\n            if (charCode < 0) {\n              var invalidSequence = body.slice(position + 1, position + 5);\n              throw syntaxError(source, position, \"Invalid character escape sequence: \\\\u\".concat(invalidSequence, \".\"));\n            }\n\n            value += String.fromCharCode(charCode);\n            position += 4;\n            break;\n          }\n\n        default:\n          throw syntaxError(source, position, \"Invalid character escape sequence: \\\\\".concat(String.fromCharCode(code), \".\"));\n      }\n\n      ++position;\n      chunkStart = position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Reads a block string token from the source file.\n *\n * \"\"\"(\"?\"?(\\\\\"\"\"|\\\\(?!=\"\"\")|[^\"\\\\]))*\"\"\"\n */\n\n\nfunction readBlockString(source, start, line, col, prev, lexer) {\n  var body = source.body;\n  var position = start + 3;\n  var chunkStart = position;\n  var code = 0;\n  var rawValue = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position))) {\n    // Closing Triple-Quote (\"\"\")\n    if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {\n      rawValue += body.slice(chunkStart, position);\n      return new Token(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, dedentBlockStringValue(rawValue));\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (body.charCodeAt(position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if ( // Escape Triple-Quote (\\\"\"\")\n    code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34) {\n      rawValue += body.slice(chunkStart, position) + '\"\"\"';\n      position += 4;\n      chunkStart = position;\n    } else {\n      ++position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Converts four hexadecimal chars to the integer that the\n * string represents. For example, uniCharCode('0','0','0','f')\n * will return 15, and uniCharCode('0','0','f','f') returns 255.\n *\n * Returns a negative number on error, if a char was invalid.\n *\n * This is implemented by noting that char2hex() returns -1 on error,\n * which means the result of ORing the char2hex() will also be negative.\n */\n\n\nfunction uniCharCode(a, b, c, d) {\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);\n}\n/**\n * Converts a hex character to its integer value.\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 on error.\n */\n\n\nfunction char2hex(a) {\n  return a >= 48 && a <= 57 ? a - 48 // 0-9\n  : a >= 65 && a <= 70 ? a - 55 // A-F\n  : a >= 97 && a <= 102 ? a - 87 // a-f\n  : -1;\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * [_A-Za-z][_0-9A-Za-z]*\n */\n\n\nfunction readName(source, start, line, col, prev) {\n  var body = source.body;\n  var bodyLength = body.length;\n  var position = start + 1;\n  var code = 0;\n\n  while (position !== bodyLength && !isNaN(code = body.charCodeAt(position)) && (code === 95 || // _\n  code >= 48 && code <= 57 || // 0-9\n  code >= 65 && code <= 90 || // A-Z\n  code >= 97 && code <= 122) // a-z\n  ) {\n    ++position;\n  }\n\n  return new Token(TokenKind.NAME, start, position, line, col, prev, body.slice(start, position));\n} // _ A-Z a-z\n\n\nfunction isNameStart(code) {\n  return code === 95 || code >= 65 && code <= 90 || code >= 97 && code <= 122;\n}","map":{"version":3,"names":["syntaxError","Token","TokenKind","dedentBlockStringValue","Lexer","source","startOfFileToken","SOF","lastToken","token","line","lineStart","_proto","prototype","advance","lookahead","kind","EOF","_token$next","next","readToken","COMMENT","isPunctuatorTokenKind","BANG","DOLLAR","AMP","PAREN_L","PAREN_R","SPREAD","COLON","EQUALS","AT","BRACKET_L","BRACKET_R","BRACE_L","PIPE","BRACE_R","printCharCode","code","isNaN","JSON","stringify","String","fromCharCode","concat","toString","toUpperCase","slice","lexer","prev","body","bodyLength","length","pos","positionAfterWhitespace","end","col","charCodeAt","readComment","readName","readNumber","readBlockString","readString","unexpectedCharacterMessage","startPosition","position","start","firstCode","isFloat","readDigits","isNameStart","FLOAT","INT","chunkStart","value","STRING","charCode","uniCharCode","invalidSequence","rawValue","BLOCK_STRING","a","b","c","d","char2hex","NAME"],"sources":["/Users/anubhavgupta/Documents/react_learning/graphql-react/relay-learning/node_modules/graphql/language/lexer.mjs"],"sourcesContent":["import { syntaxError } from \"../error/syntaxError.mjs\";\nimport { Token } from \"./ast.mjs\";\nimport { TokenKind } from \"./tokenKind.mjs\";\nimport { dedentBlockStringValue } from \"./blockString.mjs\";\n/**\n * Given a Source object, creates a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport var Lexer = /*#__PURE__*/function () {\n  /**\n   * The previously focused non-ignored token.\n   */\n\n  /**\n   * The currently focused non-ignored token.\n   */\n\n  /**\n   * The (1-indexed) line containing the current token.\n   */\n\n  /**\n   * The character offset at which the current line begins.\n   */\n  function Lexer(source) {\n    var startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0, null);\n    this.source = source;\n    this.lastToken = startOfFileToken;\n    this.token = startOfFileToken;\n    this.line = 1;\n    this.lineStart = 0;\n  }\n  /**\n   * Advances the token stream to the next non-ignored token.\n   */\n\n\n  var _proto = Lexer.prototype;\n\n  _proto.advance = function advance() {\n    this.lastToken = this.token;\n    var token = this.token = this.lookahead();\n    return token;\n  }\n  /**\n   * Looks ahead and returns the next non-ignored token, but does not change\n   * the state of Lexer.\n   */\n  ;\n\n  _proto.lookahead = function lookahead() {\n    var token = this.token;\n\n    if (token.kind !== TokenKind.EOF) {\n      do {\n        var _token$next;\n\n        // Note: next is only mutable during parsing, so we cast to allow this.\n        token = (_token$next = token.next) !== null && _token$next !== void 0 ? _token$next : token.next = readToken(this, token);\n      } while (token.kind === TokenKind.COMMENT);\n    }\n\n    return token;\n  };\n\n  return Lexer;\n}();\n/**\n * @internal\n */\n\nexport function isPunctuatorTokenKind(kind) {\n  return kind === TokenKind.BANG || kind === TokenKind.DOLLAR || kind === TokenKind.AMP || kind === TokenKind.PAREN_L || kind === TokenKind.PAREN_R || kind === TokenKind.SPREAD || kind === TokenKind.COLON || kind === TokenKind.EQUALS || kind === TokenKind.AT || kind === TokenKind.BRACKET_L || kind === TokenKind.BRACKET_R || kind === TokenKind.BRACE_L || kind === TokenKind.PIPE || kind === TokenKind.BRACE_R;\n}\n\nfunction printCharCode(code) {\n  return (// NaN/undefined represents access beyond the end of the file.\n    isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.\n    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.\n    \"\\\"\\\\u\".concat(('00' + code.toString(16).toUpperCase()).slice(-4), \"\\\"\")\n  );\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\n\nfunction readToken(lexer, prev) {\n  var source = lexer.source;\n  var body = source.body;\n  var bodyLength = body.length;\n  var pos = positionAfterWhitespace(body, prev.end, lexer);\n  var line = lexer.line;\n  var col = 1 + pos - lexer.lineStart;\n\n  if (pos >= bodyLength) {\n    return new Token(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);\n  }\n\n  var code = body.charCodeAt(pos); // SourceCharacter\n\n  switch (code) {\n    // !\n    case 33:\n      return new Token(TokenKind.BANG, pos, pos + 1, line, col, prev);\n    // #\n\n    case 35:\n      return readComment(source, pos, line, col, prev);\n    // $\n\n    case 36:\n      return new Token(TokenKind.DOLLAR, pos, pos + 1, line, col, prev);\n    // &\n\n    case 38:\n      return new Token(TokenKind.AMP, pos, pos + 1, line, col, prev);\n    // (\n\n    case 40:\n      return new Token(TokenKind.PAREN_L, pos, pos + 1, line, col, prev);\n    // )\n\n    case 41:\n      return new Token(TokenKind.PAREN_R, pos, pos + 1, line, col, prev);\n    // .\n\n    case 46:\n      if (body.charCodeAt(pos + 1) === 46 && body.charCodeAt(pos + 2) === 46) {\n        return new Token(TokenKind.SPREAD, pos, pos + 3, line, col, prev);\n      }\n\n      break;\n    // :\n\n    case 58:\n      return new Token(TokenKind.COLON, pos, pos + 1, line, col, prev);\n    // =\n\n    case 61:\n      return new Token(TokenKind.EQUALS, pos, pos + 1, line, col, prev);\n    // @\n\n    case 64:\n      return new Token(TokenKind.AT, pos, pos + 1, line, col, prev);\n    // [\n\n    case 91:\n      return new Token(TokenKind.BRACKET_L, pos, pos + 1, line, col, prev);\n    // ]\n\n    case 93:\n      return new Token(TokenKind.BRACKET_R, pos, pos + 1, line, col, prev);\n    // {\n\n    case 123:\n      return new Token(TokenKind.BRACE_L, pos, pos + 1, line, col, prev);\n    // |\n\n    case 124:\n      return new Token(TokenKind.PIPE, pos, pos + 1, line, col, prev);\n    // }\n\n    case 125:\n      return new Token(TokenKind.BRACE_R, pos, pos + 1, line, col, prev);\n    // A-Z _ a-z\n\n    case 65:\n    case 66:\n    case 67:\n    case 68:\n    case 69:\n    case 70:\n    case 71:\n    case 72:\n    case 73:\n    case 74:\n    case 75:\n    case 76:\n    case 77:\n    case 78:\n    case 79:\n    case 80:\n    case 81:\n    case 82:\n    case 83:\n    case 84:\n    case 85:\n    case 86:\n    case 87:\n    case 88:\n    case 89:\n    case 90:\n    case 95:\n    case 97:\n    case 98:\n    case 99:\n    case 100:\n    case 101:\n    case 102:\n    case 103:\n    case 104:\n    case 105:\n    case 106:\n    case 107:\n    case 108:\n    case 109:\n    case 110:\n    case 111:\n    case 112:\n    case 113:\n    case 114:\n    case 115:\n    case 116:\n    case 117:\n    case 118:\n    case 119:\n    case 120:\n    case 121:\n    case 122:\n      return readName(source, pos, line, col, prev);\n    // - 0-9\n\n    case 45:\n    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n      return readNumber(source, pos, code, line, col, prev);\n    // \"\n\n    case 34:\n      if (body.charCodeAt(pos + 1) === 34 && body.charCodeAt(pos + 2) === 34) {\n        return readBlockString(source, pos, line, col, prev, lexer);\n      }\n\n      return readString(source, pos, line, col, prev);\n  }\n\n  throw syntaxError(source, pos, unexpectedCharacterMessage(code));\n}\n/**\n * Report a message that an unexpected character was encountered.\n */\n\n\nfunction unexpectedCharacterMessage(code) {\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n    return \"Cannot contain the invalid character \".concat(printCharCode(code), \".\");\n  }\n\n  if (code === 39) {\n    // '\n    return 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?';\n  }\n\n  return \"Cannot parse the unexpected character \".concat(printCharCode(code), \".\");\n}\n/**\n * Reads from body starting at startPosition until it finds a non-whitespace\n * character, then returns the position of that character for lexing.\n */\n\n\nfunction positionAfterWhitespace(body, startPosition, lexer) {\n  var bodyLength = body.length;\n  var position = startPosition;\n\n  while (position < bodyLength) {\n    var code = body.charCodeAt(position); // tab | space | comma | BOM\n\n    if (code === 9 || code === 32 || code === 44 || code === 0xfeff) {\n      ++position;\n    } else if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (body.charCodeAt(position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else {\n      break;\n    }\n  }\n\n  return position;\n}\n/**\n * Reads a comment token from the source file.\n *\n * #[\\u0009\\u0020-\\uFFFF]*\n */\n\n\nfunction readComment(source, start, line, col, prev) {\n  var body = source.body;\n  var code;\n  var position = start;\n\n  do {\n    code = body.charCodeAt(++position);\n  } while (!isNaN(code) && ( // SourceCharacter but not LineTerminator\n  code > 0x001f || code === 0x0009));\n\n  return new Token(TokenKind.COMMENT, start, position, line, col, prev, body.slice(start + 1, position));\n}\n/**\n * Reads a number token from the source file, either a float\n * or an int depending on whether a decimal point appears.\n *\n * Int:   -?(0|[1-9][0-9]*)\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?\n */\n\n\nfunction readNumber(source, start, firstCode, line, col, prev) {\n  var body = source.body;\n  var code = firstCode;\n  var position = start;\n  var isFloat = false;\n\n  if (code === 45) {\n    // -\n    code = body.charCodeAt(++position);\n  }\n\n  if (code === 48) {\n    // 0\n    code = body.charCodeAt(++position);\n\n    if (code >= 48 && code <= 57) {\n      throw syntaxError(source, position, \"Invalid number, unexpected digit after 0: \".concat(printCharCode(code), \".\"));\n    }\n  } else {\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 46) {\n    // .\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 69 || code === 101) {\n    // E e\n    isFloat = true;\n    code = body.charCodeAt(++position);\n\n    if (code === 43 || code === 45) {\n      // + -\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or NameStart\n\n\n  if (code === 46 || isNameStart(code)) {\n    throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n  }\n\n  return new Token(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, body.slice(start, position));\n}\n/**\n * Returns the new position in the source after reading digits.\n */\n\n\nfunction readDigits(source, start, firstCode) {\n  var body = source.body;\n  var position = start;\n  var code = firstCode;\n\n  if (code >= 48 && code <= 57) {\n    // 0 - 9\n    do {\n      code = body.charCodeAt(++position);\n    } while (code >= 48 && code <= 57); // 0 - 9\n\n\n    return position;\n  }\n\n  throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n}\n/**\n * Reads a string token from the source file.\n *\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"\n */\n\n\nfunction readString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 1;\n  var chunkStart = position;\n  var code = 0;\n  var value = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position)) && // not LineTerminator\n  code !== 0x000a && code !== 0x000d) {\n    // Closing Quote (\")\n    if (code === 34) {\n      value += body.slice(chunkStart, position);\n      return new Token(TokenKind.STRING, start, position + 1, line, col, prev, value);\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    ++position;\n\n    if (code === 92) {\n      // \\\n      value += body.slice(chunkStart, position - 1);\n      code = body.charCodeAt(position);\n\n      switch (code) {\n        case 34:\n          value += '\"';\n          break;\n\n        case 47:\n          value += '/';\n          break;\n\n        case 92:\n          value += '\\\\';\n          break;\n\n        case 98:\n          value += '\\b';\n          break;\n\n        case 102:\n          value += '\\f';\n          break;\n\n        case 110:\n          value += '\\n';\n          break;\n\n        case 114:\n          value += '\\r';\n          break;\n\n        case 116:\n          value += '\\t';\n          break;\n\n        case 117:\n          {\n            // uXXXX\n            var charCode = uniCharCode(body.charCodeAt(position + 1), body.charCodeAt(position + 2), body.charCodeAt(position + 3), body.charCodeAt(position + 4));\n\n            if (charCode < 0) {\n              var invalidSequence = body.slice(position + 1, position + 5);\n              throw syntaxError(source, position, \"Invalid character escape sequence: \\\\u\".concat(invalidSequence, \".\"));\n            }\n\n            value += String.fromCharCode(charCode);\n            position += 4;\n            break;\n          }\n\n        default:\n          throw syntaxError(source, position, \"Invalid character escape sequence: \\\\\".concat(String.fromCharCode(code), \".\"));\n      }\n\n      ++position;\n      chunkStart = position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Reads a block string token from the source file.\n *\n * \"\"\"(\"?\"?(\\\\\"\"\"|\\\\(?!=\"\"\")|[^\"\\\\]))*\"\"\"\n */\n\n\nfunction readBlockString(source, start, line, col, prev, lexer) {\n  var body = source.body;\n  var position = start + 3;\n  var chunkStart = position;\n  var code = 0;\n  var rawValue = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position))) {\n    // Closing Triple-Quote (\"\"\")\n    if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {\n      rawValue += body.slice(chunkStart, position);\n      return new Token(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, dedentBlockStringValue(rawValue));\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (body.charCodeAt(position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if ( // Escape Triple-Quote (\\\"\"\")\n    code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34) {\n      rawValue += body.slice(chunkStart, position) + '\"\"\"';\n      position += 4;\n      chunkStart = position;\n    } else {\n      ++position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Converts four hexadecimal chars to the integer that the\n * string represents. For example, uniCharCode('0','0','0','f')\n * will return 15, and uniCharCode('0','0','f','f') returns 255.\n *\n * Returns a negative number on error, if a char was invalid.\n *\n * This is implemented by noting that char2hex() returns -1 on error,\n * which means the result of ORing the char2hex() will also be negative.\n */\n\n\nfunction uniCharCode(a, b, c, d) {\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);\n}\n/**\n * Converts a hex character to its integer value.\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 on error.\n */\n\n\nfunction char2hex(a) {\n  return a >= 48 && a <= 57 ? a - 48 // 0-9\n  : a >= 65 && a <= 70 ? a - 55 // A-F\n  : a >= 97 && a <= 102 ? a - 87 // a-f\n  : -1;\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * [_A-Za-z][_0-9A-Za-z]*\n */\n\n\nfunction readName(source, start, line, col, prev) {\n  var body = source.body;\n  var bodyLength = body.length;\n  var position = start + 1;\n  var code = 0;\n\n  while (position !== bodyLength && !isNaN(code = body.charCodeAt(position)) && (code === 95 || // _\n  code >= 48 && code <= 57 || // 0-9\n  code >= 65 && code <= 90 || // A-Z\n  code >= 97 && code <= 122) // a-z\n  ) {\n    ++position;\n  }\n\n  return new Token(TokenKind.NAME, start, position, line, col, prev, body.slice(start, position));\n} // _ A-Z a-z\n\n\nfunction isNameStart(code) {\n  return code === 95 || code >= 65 && code <= 90 || code >= 97 && code <= 122;\n}\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,0BAA5B;AACA,SAASC,KAAT,QAAsB,WAAtB;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,sBAAT,QAAuC,mBAAvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,KAAK,GAAG,aAAa,YAAY;EAC1C;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;EACE,SAASA,KAAT,CAAeC,MAAf,EAAuB;IACrB,IAAIC,gBAAgB,GAAG,IAAIL,KAAJ,CAAUC,SAAS,CAACK,GAApB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,IAArC,CAAvB;IACA,KAAKF,MAAL,GAAcA,MAAd;IACA,KAAKG,SAAL,GAAiBF,gBAAjB;IACA,KAAKG,KAAL,GAAaH,gBAAb;IACA,KAAKI,IAAL,GAAY,CAAZ;IACA,KAAKC,SAAL,GAAiB,CAAjB;EACD;EACD;AACF;AACA;;;EAGE,IAAIC,MAAM,GAAGR,KAAK,CAACS,SAAnB;;EAEAD,MAAM,CAACE,OAAP,GAAiB,SAASA,OAAT,GAAmB;IAClC,KAAKN,SAAL,GAAiB,KAAKC,KAAtB;IACA,IAAIA,KAAK,GAAG,KAAKA,KAAL,GAAa,KAAKM,SAAL,EAAzB;IACA,OAAON,KAAP;EACD;EACD;AACF;AACA;AACA;EARE;;EAWAG,MAAM,CAACG,SAAP,GAAmB,SAASA,SAAT,GAAqB;IACtC,IAAIN,KAAK,GAAG,KAAKA,KAAjB;;IAEA,IAAIA,KAAK,CAACO,IAAN,KAAed,SAAS,CAACe,GAA7B,EAAkC;MAChC,GAAG;QACD,IAAIC,WAAJ,CADC,CAGD;;;QACAT,KAAK,GAAG,CAACS,WAAW,GAAGT,KAAK,CAACU,IAArB,MAA+B,IAA/B,IAAuCD,WAAW,KAAK,KAAK,CAA5D,GAAgEA,WAAhE,GAA8ET,KAAK,CAACU,IAAN,GAAaC,SAAS,CAAC,IAAD,EAAOX,KAAP,CAA5G;MACD,CALD,QAKSA,KAAK,CAACO,IAAN,KAAed,SAAS,CAACmB,OALlC;IAMD;;IAED,OAAOZ,KAAP;EACD,CAbD;;EAeA,OAAOL,KAAP;AACD,CA1D+B,EAAzB;AA2DP;AACA;AACA;;AAEA,OAAO,SAASkB,qBAAT,CAA+BN,IAA/B,EAAqC;EAC1C,OAAOA,IAAI,KAAKd,SAAS,CAACqB,IAAnB,IAA2BP,IAAI,KAAKd,SAAS,CAACsB,MAA9C,IAAwDR,IAAI,KAAKd,SAAS,CAACuB,GAA3E,IAAkFT,IAAI,KAAKd,SAAS,CAACwB,OAArG,IAAgHV,IAAI,KAAKd,SAAS,CAACyB,OAAnI,IAA8IX,IAAI,KAAKd,SAAS,CAAC0B,MAAjK,IAA2KZ,IAAI,KAAKd,SAAS,CAAC2B,KAA9L,IAAuMb,IAAI,KAAKd,SAAS,CAAC4B,MAA1N,IAAoOd,IAAI,KAAKd,SAAS,CAAC6B,EAAvP,IAA6Pf,IAAI,KAAKd,SAAS,CAAC8B,SAAhR,IAA6RhB,IAAI,KAAKd,SAAS,CAAC+B,SAAhT,IAA6TjB,IAAI,KAAKd,SAAS,CAACgC,OAAhV,IAA2VlB,IAAI,KAAKd,SAAS,CAACiC,IAA9W,IAAsXnB,IAAI,KAAKd,SAAS,CAACkC,OAAhZ;AACD;;AAED,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;EAC3B,OAAQ;IACNC,KAAK,CAACD,IAAD,CAAL,GAAcpC,SAAS,CAACe,GAAxB,GAA8B;IAC9BqB,IAAI,GAAG,MAAP,GAAgBE,IAAI,CAACC,SAAL,CAAeC,MAAM,CAACC,YAAP,CAAoBL,IAApB,CAAf,CAAhB,GAA4D;IAC5D,QAAQM,MAAR,CAAe,CAAC,OAAON,IAAI,CAACO,QAAL,CAAc,EAAd,EAAkBC,WAAlB,EAAR,EAAyCC,KAAzC,CAA+C,CAAC,CAAhD,CAAf,EAAmE,IAAnE;EAHF;AAKD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAAS3B,SAAT,CAAmB4B,KAAnB,EAA0BC,IAA1B,EAAgC;EAC9B,IAAI5C,MAAM,GAAG2C,KAAK,CAAC3C,MAAnB;EACA,IAAI6C,IAAI,GAAG7C,MAAM,CAAC6C,IAAlB;EACA,IAAIC,UAAU,GAAGD,IAAI,CAACE,MAAtB;EACA,IAAIC,GAAG,GAAGC,uBAAuB,CAACJ,IAAD,EAAOD,IAAI,CAACM,GAAZ,EAAiBP,KAAjB,CAAjC;EACA,IAAItC,IAAI,GAAGsC,KAAK,CAACtC,IAAjB;EACA,IAAI8C,GAAG,GAAG,IAAIH,GAAJ,GAAUL,KAAK,CAACrC,SAA1B;;EAEA,IAAI0C,GAAG,IAAIF,UAAX,EAAuB;IACrB,OAAO,IAAIlD,KAAJ,CAAUC,SAAS,CAACe,GAApB,EAAyBkC,UAAzB,EAAqCA,UAArC,EAAiDzC,IAAjD,EAAuD8C,GAAvD,EAA4DP,IAA5D,CAAP;EACD;;EAED,IAAIX,IAAI,GAAGY,IAAI,CAACO,UAAL,CAAgBJ,GAAhB,CAAX,CAZ8B,CAYG;;EAEjC,QAAQf,IAAR;IACE;IACA,KAAK,EAAL;MACE,OAAO,IAAIrC,KAAJ,CAAUC,SAAS,CAACqB,IAApB,EAA0B8B,GAA1B,EAA+BA,GAAG,GAAG,CAArC,EAAwC3C,IAAxC,EAA8C8C,GAA9C,EAAmDP,IAAnD,CAAP;IACF;;IAEA,KAAK,EAAL;MACE,OAAOS,WAAW,CAACrD,MAAD,EAASgD,GAAT,EAAc3C,IAAd,EAAoB8C,GAApB,EAAyBP,IAAzB,CAAlB;IACF;;IAEA,KAAK,EAAL;MACE,OAAO,IAAIhD,KAAJ,CAAUC,SAAS,CAACsB,MAApB,EAA4B6B,GAA5B,EAAiCA,GAAG,GAAG,CAAvC,EAA0C3C,IAA1C,EAAgD8C,GAAhD,EAAqDP,IAArD,CAAP;IACF;;IAEA,KAAK,EAAL;MACE,OAAO,IAAIhD,KAAJ,CAAUC,SAAS,CAACuB,GAApB,EAAyB4B,GAAzB,EAA8BA,GAAG,GAAG,CAApC,EAAuC3C,IAAvC,EAA6C8C,GAA7C,EAAkDP,IAAlD,CAAP;IACF;;IAEA,KAAK,EAAL;MACE,OAAO,IAAIhD,KAAJ,CAAUC,SAAS,CAACwB,OAApB,EAA6B2B,GAA7B,EAAkCA,GAAG,GAAG,CAAxC,EAA2C3C,IAA3C,EAAiD8C,GAAjD,EAAsDP,IAAtD,CAAP;IACF;;IAEA,KAAK,EAAL;MACE,OAAO,IAAIhD,KAAJ,CAAUC,SAAS,CAACyB,OAApB,EAA6B0B,GAA7B,EAAkCA,GAAG,GAAG,CAAxC,EAA2C3C,IAA3C,EAAiD8C,GAAjD,EAAsDP,IAAtD,CAAP;IACF;;IAEA,KAAK,EAAL;MACE,IAAIC,IAAI,CAACO,UAAL,CAAgBJ,GAAG,GAAG,CAAtB,MAA6B,EAA7B,IAAmCH,IAAI,CAACO,UAAL,CAAgBJ,GAAG,GAAG,CAAtB,MAA6B,EAApE,EAAwE;QACtE,OAAO,IAAIpD,KAAJ,CAAUC,SAAS,CAAC0B,MAApB,EAA4ByB,GAA5B,EAAiCA,GAAG,GAAG,CAAvC,EAA0C3C,IAA1C,EAAgD8C,GAAhD,EAAqDP,IAArD,CAAP;MACD;;MAED;IACF;;IAEA,KAAK,EAAL;MACE,OAAO,IAAIhD,KAAJ,CAAUC,SAAS,CAAC2B,KAApB,EAA2BwB,GAA3B,EAAgCA,GAAG,GAAG,CAAtC,EAAyC3C,IAAzC,EAA+C8C,GAA/C,EAAoDP,IAApD,CAAP;IACF;;IAEA,KAAK,EAAL;MACE,OAAO,IAAIhD,KAAJ,CAAUC,SAAS,CAAC4B,MAApB,EAA4BuB,GAA5B,EAAiCA,GAAG,GAAG,CAAvC,EAA0C3C,IAA1C,EAAgD8C,GAAhD,EAAqDP,IAArD,CAAP;IACF;;IAEA,KAAK,EAAL;MACE,OAAO,IAAIhD,KAAJ,CAAUC,SAAS,CAAC6B,EAApB,EAAwBsB,GAAxB,EAA6BA,GAAG,GAAG,CAAnC,EAAsC3C,IAAtC,EAA4C8C,GAA5C,EAAiDP,IAAjD,CAAP;IACF;;IAEA,KAAK,EAAL;MACE,OAAO,IAAIhD,KAAJ,CAAUC,SAAS,CAAC8B,SAApB,EAA+BqB,GAA/B,EAAoCA,GAAG,GAAG,CAA1C,EAA6C3C,IAA7C,EAAmD8C,GAAnD,EAAwDP,IAAxD,CAAP;IACF;;IAEA,KAAK,EAAL;MACE,OAAO,IAAIhD,KAAJ,CAAUC,SAAS,CAAC+B,SAApB,EAA+BoB,GAA/B,EAAoCA,GAAG,GAAG,CAA1C,EAA6C3C,IAA7C,EAAmD8C,GAAnD,EAAwDP,IAAxD,CAAP;IACF;;IAEA,KAAK,GAAL;MACE,OAAO,IAAIhD,KAAJ,CAAUC,SAAS,CAACgC,OAApB,EAA6BmB,GAA7B,EAAkCA,GAAG,GAAG,CAAxC,EAA2C3C,IAA3C,EAAiD8C,GAAjD,EAAsDP,IAAtD,CAAP;IACF;;IAEA,KAAK,GAAL;MACE,OAAO,IAAIhD,KAAJ,CAAUC,SAAS,CAACiC,IAApB,EAA0BkB,GAA1B,EAA+BA,GAAG,GAAG,CAArC,EAAwC3C,IAAxC,EAA8C8C,GAA9C,EAAmDP,IAAnD,CAAP;IACF;;IAEA,KAAK,GAAL;MACE,OAAO,IAAIhD,KAAJ,CAAUC,SAAS,CAACkC,OAApB,EAA6BiB,GAA7B,EAAkCA,GAAG,GAAG,CAAxC,EAA2C3C,IAA3C,EAAiD8C,GAAjD,EAAsDP,IAAtD,CAAP;IACF;;IAEA,KAAK,EAAL;IACA,KAAK,EAAL;IACA,KAAK,EAAL;IACA,KAAK,EAAL;IACA,KAAK,EAAL;IACA,KAAK,EAAL;IACA,KAAK,EAAL;IACA,KAAK,EAAL;IACA,KAAK,EAAL;IACA,KAAK,EAAL;IACA,KAAK,EAAL;IACA,KAAK,EAAL;IACA,KAAK,EAAL;IACA,KAAK,EAAL;IACA,KAAK,EAAL;IACA,KAAK,EAAL;IACA,KAAK,EAAL;IACA,KAAK,EAAL;IACA,KAAK,EAAL;IACA,KAAK,EAAL;IACA,KAAK,EAAL;IACA,KAAK,EAAL;IACA,KAAK,EAAL;IACA,KAAK,EAAL;IACA,KAAK,EAAL;IACA,KAAK,EAAL;IACA,KAAK,EAAL;IACA,KAAK,EAAL;IACA,KAAK,EAAL;IACA,KAAK,EAAL;IACA,KAAK,GAAL;IACA,KAAK,GAAL;IACA,KAAK,GAAL;IACA,KAAK,GAAL;IACA,KAAK,GAAL;IACA,KAAK,GAAL;IACA,KAAK,GAAL;IACA,KAAK,GAAL;IACA,KAAK,GAAL;IACA,KAAK,GAAL;IACA,KAAK,GAAL;IACA,KAAK,GAAL;IACA,KAAK,GAAL;IACA,KAAK,GAAL;IACA,KAAK,GAAL;IACA,KAAK,GAAL;IACA,KAAK,GAAL;IACA,KAAK,GAAL;IACA,KAAK,GAAL;IACA,KAAK,GAAL;IACA,KAAK,GAAL;IACA,KAAK,GAAL;IACA,KAAK,GAAL;MACE,OAAOU,QAAQ,CAACtD,MAAD,EAASgD,GAAT,EAAc3C,IAAd,EAAoB8C,GAApB,EAAyBP,IAAzB,CAAf;IACF;;IAEA,KAAK,EAAL;IACA,KAAK,EAAL;IACA,KAAK,EAAL;IACA,KAAK,EAAL;IACA,KAAK,EAAL;IACA,KAAK,EAAL;IACA,KAAK,EAAL;IACA,KAAK,EAAL;IACA,KAAK,EAAL;IACA,KAAK,EAAL;IACA,KAAK,EAAL;MACE,OAAOW,UAAU,CAACvD,MAAD,EAASgD,GAAT,EAAcf,IAAd,EAAoB5B,IAApB,EAA0B8C,GAA1B,EAA+BP,IAA/B,CAAjB;IACF;;IAEA,KAAK,EAAL;MACE,IAAIC,IAAI,CAACO,UAAL,CAAgBJ,GAAG,GAAG,CAAtB,MAA6B,EAA7B,IAAmCH,IAAI,CAACO,UAAL,CAAgBJ,GAAG,GAAG,CAAtB,MAA6B,EAApE,EAAwE;QACtE,OAAOQ,eAAe,CAACxD,MAAD,EAASgD,GAAT,EAAc3C,IAAd,EAAoB8C,GAApB,EAAyBP,IAAzB,EAA+BD,KAA/B,CAAtB;MACD;;MAED,OAAOc,UAAU,CAACzD,MAAD,EAASgD,GAAT,EAAc3C,IAAd,EAAoB8C,GAApB,EAAyBP,IAAzB,CAAjB;EA7IJ;;EAgJA,MAAMjD,WAAW,CAACK,MAAD,EAASgD,GAAT,EAAcU,0BAA0B,CAACzB,IAAD,CAAxC,CAAjB;AACD;AACD;AACA;AACA;;;AAGA,SAASyB,0BAAT,CAAoCzB,IAApC,EAA0C;EACxC,IAAIA,IAAI,GAAG,MAAP,IAAiBA,IAAI,KAAK,MAA1B,IAAoCA,IAAI,KAAK,MAA7C,IAAuDA,IAAI,KAAK,MAApE,EAA4E;IAC1E,OAAO,wCAAwCM,MAAxC,CAA+CP,aAAa,CAACC,IAAD,CAA5D,EAAoE,GAApE,CAAP;EACD;;EAED,IAAIA,IAAI,KAAK,EAAb,EAAiB;IACf;IACA,OAAO,iFAAP;EACD;;EAED,OAAO,yCAAyCM,MAAzC,CAAgDP,aAAa,CAACC,IAAD,CAA7D,EAAqE,GAArE,CAAP;AACD;AACD;AACA;AACA;AACA;;;AAGA,SAASgB,uBAAT,CAAiCJ,IAAjC,EAAuCc,aAAvC,EAAsDhB,KAAtD,EAA6D;EAC3D,IAAIG,UAAU,GAAGD,IAAI,CAACE,MAAtB;EACA,IAAIa,QAAQ,GAAGD,aAAf;;EAEA,OAAOC,QAAQ,GAAGd,UAAlB,EAA8B;IAC5B,IAAIb,IAAI,GAAGY,IAAI,CAACO,UAAL,CAAgBQ,QAAhB,CAAX,CAD4B,CACU;;IAEtC,IAAI3B,IAAI,KAAK,CAAT,IAAcA,IAAI,KAAK,EAAvB,IAA6BA,IAAI,KAAK,EAAtC,IAA4CA,IAAI,KAAK,MAAzD,EAAiE;MAC/D,EAAE2B,QAAF;IACD,CAFD,MAEO,IAAI3B,IAAI,KAAK,EAAb,EAAiB;MACtB;MACA,EAAE2B,QAAF;MACA,EAAEjB,KAAK,CAACtC,IAAR;MACAsC,KAAK,CAACrC,SAAN,GAAkBsD,QAAlB;IACD,CALM,MAKA,IAAI3B,IAAI,KAAK,EAAb,EAAiB;MACtB;MACA,IAAIY,IAAI,CAACO,UAAL,CAAgBQ,QAAQ,GAAG,CAA3B,MAAkC,EAAtC,EAA0C;QACxCA,QAAQ,IAAI,CAAZ;MACD,CAFD,MAEO;QACL,EAAEA,QAAF;MACD;;MAED,EAAEjB,KAAK,CAACtC,IAAR;MACAsC,KAAK,CAACrC,SAAN,GAAkBsD,QAAlB;IACD,CAVM,MAUA;MACL;IACD;EACF;;EAED,OAAOA,QAAP;AACD;AACD;AACA;AACA;AACA;AACA;;;AAGA,SAASP,WAAT,CAAqBrD,MAArB,EAA6B6D,KAA7B,EAAoCxD,IAApC,EAA0C8C,GAA1C,EAA+CP,IAA/C,EAAqD;EACnD,IAAIC,IAAI,GAAG7C,MAAM,CAAC6C,IAAlB;EACA,IAAIZ,IAAJ;EACA,IAAI2B,QAAQ,GAAGC,KAAf;;EAEA,GAAG;IACD5B,IAAI,GAAGY,IAAI,CAACO,UAAL,CAAgB,EAAEQ,QAAlB,CAAP;EACD,CAFD,QAES,CAAC1B,KAAK,CAACD,IAAD,CAAN,MAAkB;EAC3BA,IAAI,GAAG,MAAP,IAAiBA,IAAI,KAAK,MADjB,CAFT;;EAKA,OAAO,IAAIrC,KAAJ,CAAUC,SAAS,CAACmB,OAApB,EAA6B6C,KAA7B,EAAoCD,QAApC,EAA8CvD,IAA9C,EAAoD8C,GAApD,EAAyDP,IAAzD,EAA+DC,IAAI,CAACH,KAAL,CAAWmB,KAAK,GAAG,CAAnB,EAAsBD,QAAtB,CAA/D,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASL,UAAT,CAAoBvD,MAApB,EAA4B6D,KAA5B,EAAmCC,SAAnC,EAA8CzD,IAA9C,EAAoD8C,GAApD,EAAyDP,IAAzD,EAA+D;EAC7D,IAAIC,IAAI,GAAG7C,MAAM,CAAC6C,IAAlB;EACA,IAAIZ,IAAI,GAAG6B,SAAX;EACA,IAAIF,QAAQ,GAAGC,KAAf;EACA,IAAIE,OAAO,GAAG,KAAd;;EAEA,IAAI9B,IAAI,KAAK,EAAb,EAAiB;IACf;IACAA,IAAI,GAAGY,IAAI,CAACO,UAAL,CAAgB,EAAEQ,QAAlB,CAAP;EACD;;EAED,IAAI3B,IAAI,KAAK,EAAb,EAAiB;IACf;IACAA,IAAI,GAAGY,IAAI,CAACO,UAAL,CAAgB,EAAEQ,QAAlB,CAAP;;IAEA,IAAI3B,IAAI,IAAI,EAAR,IAAcA,IAAI,IAAI,EAA1B,EAA8B;MAC5B,MAAMtC,WAAW,CAACK,MAAD,EAAS4D,QAAT,EAAmB,6CAA6CrB,MAA7C,CAAoDP,aAAa,CAACC,IAAD,CAAjE,EAAyE,GAAzE,CAAnB,CAAjB;IACD;EACF,CAPD,MAOO;IACL2B,QAAQ,GAAGI,UAAU,CAAChE,MAAD,EAAS4D,QAAT,EAAmB3B,IAAnB,CAArB;IACAA,IAAI,GAAGY,IAAI,CAACO,UAAL,CAAgBQ,QAAhB,CAAP;EACD;;EAED,IAAI3B,IAAI,KAAK,EAAb,EAAiB;IACf;IACA8B,OAAO,GAAG,IAAV;IACA9B,IAAI,GAAGY,IAAI,CAACO,UAAL,CAAgB,EAAEQ,QAAlB,CAAP;IACAA,QAAQ,GAAGI,UAAU,CAAChE,MAAD,EAAS4D,QAAT,EAAmB3B,IAAnB,CAArB;IACAA,IAAI,GAAGY,IAAI,CAACO,UAAL,CAAgBQ,QAAhB,CAAP;EACD;;EAED,IAAI3B,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,GAA5B,EAAiC;IAC/B;IACA8B,OAAO,GAAG,IAAV;IACA9B,IAAI,GAAGY,IAAI,CAACO,UAAL,CAAgB,EAAEQ,QAAlB,CAAP;;IAEA,IAAI3B,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,EAA5B,EAAgC;MAC9B;MACAA,IAAI,GAAGY,IAAI,CAACO,UAAL,CAAgB,EAAEQ,QAAlB,CAAP;IACD;;IAEDA,QAAQ,GAAGI,UAAU,CAAChE,MAAD,EAAS4D,QAAT,EAAmB3B,IAAnB,CAArB;IACAA,IAAI,GAAGY,IAAI,CAACO,UAAL,CAAgBQ,QAAhB,CAAP;EACD,CA3C4D,CA2C3D;;;EAGF,IAAI3B,IAAI,KAAK,EAAT,IAAegC,WAAW,CAAChC,IAAD,CAA9B,EAAsC;IACpC,MAAMtC,WAAW,CAACK,MAAD,EAAS4D,QAAT,EAAmB,2CAA2CrB,MAA3C,CAAkDP,aAAa,CAACC,IAAD,CAA/D,EAAuE,GAAvE,CAAnB,CAAjB;EACD;;EAED,OAAO,IAAIrC,KAAJ,CAAUmE,OAAO,GAAGlE,SAAS,CAACqE,KAAb,GAAqBrE,SAAS,CAACsE,GAAhD,EAAqDN,KAArD,EAA4DD,QAA5D,EAAsEvD,IAAtE,EAA4E8C,GAA5E,EAAiFP,IAAjF,EAAuFC,IAAI,CAACH,KAAL,CAAWmB,KAAX,EAAkBD,QAAlB,CAAvF,CAAP;AACD;AACD;AACA;AACA;;;AAGA,SAASI,UAAT,CAAoBhE,MAApB,EAA4B6D,KAA5B,EAAmCC,SAAnC,EAA8C;EAC5C,IAAIjB,IAAI,GAAG7C,MAAM,CAAC6C,IAAlB;EACA,IAAIe,QAAQ,GAAGC,KAAf;EACA,IAAI5B,IAAI,GAAG6B,SAAX;;EAEA,IAAI7B,IAAI,IAAI,EAAR,IAAcA,IAAI,IAAI,EAA1B,EAA8B;IAC5B;IACA,GAAG;MACDA,IAAI,GAAGY,IAAI,CAACO,UAAL,CAAgB,EAAEQ,QAAlB,CAAP;IACD,CAFD,QAES3B,IAAI,IAAI,EAAR,IAAcA,IAAI,IAAI,EAF/B,EAF4B,CAIQ;;;IAGpC,OAAO2B,QAAP;EACD;;EAED,MAAMjE,WAAW,CAACK,MAAD,EAAS4D,QAAT,EAAmB,2CAA2CrB,MAA3C,CAAkDP,aAAa,CAACC,IAAD,CAA/D,EAAuE,GAAvE,CAAnB,CAAjB;AACD;AACD;AACA;AACA;AACA;AACA;;;AAGA,SAASwB,UAAT,CAAoBzD,MAApB,EAA4B6D,KAA5B,EAAmCxD,IAAnC,EAAyC8C,GAAzC,EAA8CP,IAA9C,EAAoD;EAClD,IAAIC,IAAI,GAAG7C,MAAM,CAAC6C,IAAlB;EACA,IAAIe,QAAQ,GAAGC,KAAK,GAAG,CAAvB;EACA,IAAIO,UAAU,GAAGR,QAAjB;EACA,IAAI3B,IAAI,GAAG,CAAX;EACA,IAAIoC,KAAK,GAAG,EAAZ;;EAEA,OAAOT,QAAQ,GAAGf,IAAI,CAACE,MAAhB,IAA0B,CAACb,KAAK,CAACD,IAAI,GAAGY,IAAI,CAACO,UAAL,CAAgBQ,QAAhB,CAAR,CAAhC,IAAsE;EAC7E3B,IAAI,KAAK,MADF,IACYA,IAAI,KAAK,MAD5B,EACoC;IAClC;IACA,IAAIA,IAAI,KAAK,EAAb,EAAiB;MACfoC,KAAK,IAAIxB,IAAI,CAACH,KAAL,CAAW0B,UAAX,EAAuBR,QAAvB,CAAT;MACA,OAAO,IAAIhE,KAAJ,CAAUC,SAAS,CAACyE,MAApB,EAA4BT,KAA5B,EAAmCD,QAAQ,GAAG,CAA9C,EAAiDvD,IAAjD,EAAuD8C,GAAvD,EAA4DP,IAA5D,EAAkEyB,KAAlE,CAAP;IACD,CALiC,CAKhC;;;IAGF,IAAIpC,IAAI,GAAG,MAAP,IAAiBA,IAAI,KAAK,MAA9B,EAAsC;MACpC,MAAMtC,WAAW,CAACK,MAAD,EAAS4D,QAAT,EAAmB,oCAAoCrB,MAApC,CAA2CP,aAAa,CAACC,IAAD,CAAxD,EAAgE,GAAhE,CAAnB,CAAjB;IACD;;IAED,EAAE2B,QAAF;;IAEA,IAAI3B,IAAI,KAAK,EAAb,EAAiB;MACf;MACAoC,KAAK,IAAIxB,IAAI,CAACH,KAAL,CAAW0B,UAAX,EAAuBR,QAAQ,GAAG,CAAlC,CAAT;MACA3B,IAAI,GAAGY,IAAI,CAACO,UAAL,CAAgBQ,QAAhB,CAAP;;MAEA,QAAQ3B,IAAR;QACE,KAAK,EAAL;UACEoC,KAAK,IAAI,GAAT;UACA;;QAEF,KAAK,EAAL;UACEA,KAAK,IAAI,GAAT;UACA;;QAEF,KAAK,EAAL;UACEA,KAAK,IAAI,IAAT;UACA;;QAEF,KAAK,EAAL;UACEA,KAAK,IAAI,IAAT;UACA;;QAEF,KAAK,GAAL;UACEA,KAAK,IAAI,IAAT;UACA;;QAEF,KAAK,GAAL;UACEA,KAAK,IAAI,IAAT;UACA;;QAEF,KAAK,GAAL;UACEA,KAAK,IAAI,IAAT;UACA;;QAEF,KAAK,GAAL;UACEA,KAAK,IAAI,IAAT;UACA;;QAEF,KAAK,GAAL;UACE;YACE;YACA,IAAIE,QAAQ,GAAGC,WAAW,CAAC3B,IAAI,CAACO,UAAL,CAAgBQ,QAAQ,GAAG,CAA3B,CAAD,EAAgCf,IAAI,CAACO,UAAL,CAAgBQ,QAAQ,GAAG,CAA3B,CAAhC,EAA+Df,IAAI,CAACO,UAAL,CAAgBQ,QAAQ,GAAG,CAA3B,CAA/D,EAA8Ff,IAAI,CAACO,UAAL,CAAgBQ,QAAQ,GAAG,CAA3B,CAA9F,CAA1B;;YAEA,IAAIW,QAAQ,GAAG,CAAf,EAAkB;cAChB,IAAIE,eAAe,GAAG5B,IAAI,CAACH,KAAL,CAAWkB,QAAQ,GAAG,CAAtB,EAAyBA,QAAQ,GAAG,CAApC,CAAtB;cACA,MAAMjE,WAAW,CAACK,MAAD,EAAS4D,QAAT,EAAmB,yCAAyCrB,MAAzC,CAAgDkC,eAAhD,EAAiE,GAAjE,CAAnB,CAAjB;YACD;;YAEDJ,KAAK,IAAIhC,MAAM,CAACC,YAAP,CAAoBiC,QAApB,CAAT;YACAX,QAAQ,IAAI,CAAZ;YACA;UACD;;QAEH;UACE,MAAMjE,WAAW,CAACK,MAAD,EAAS4D,QAAT,EAAmB,wCAAwCrB,MAAxC,CAA+CF,MAAM,CAACC,YAAP,CAAoBL,IAApB,CAA/C,EAA0E,GAA1E,CAAnB,CAAjB;MAjDJ;;MAoDA,EAAE2B,QAAF;MACAQ,UAAU,GAAGR,QAAb;IACD;EACF;;EAED,MAAMjE,WAAW,CAACK,MAAD,EAAS4D,QAAT,EAAmB,sBAAnB,CAAjB;AACD;AACD;AACA;AACA;AACA;AACA;;;AAGA,SAASJ,eAAT,CAAyBxD,MAAzB,EAAiC6D,KAAjC,EAAwCxD,IAAxC,EAA8C8C,GAA9C,EAAmDP,IAAnD,EAAyDD,KAAzD,EAAgE;EAC9D,IAAIE,IAAI,GAAG7C,MAAM,CAAC6C,IAAlB;EACA,IAAIe,QAAQ,GAAGC,KAAK,GAAG,CAAvB;EACA,IAAIO,UAAU,GAAGR,QAAjB;EACA,IAAI3B,IAAI,GAAG,CAAX;EACA,IAAIyC,QAAQ,GAAG,EAAf;;EAEA,OAAOd,QAAQ,GAAGf,IAAI,CAACE,MAAhB,IAA0B,CAACb,KAAK,CAACD,IAAI,GAAGY,IAAI,CAACO,UAAL,CAAgBQ,QAAhB,CAAR,CAAvC,EAA2E;IACzE;IACA,IAAI3B,IAAI,KAAK,EAAT,IAAeY,IAAI,CAACO,UAAL,CAAgBQ,QAAQ,GAAG,CAA3B,MAAkC,EAAjD,IAAuDf,IAAI,CAACO,UAAL,CAAgBQ,QAAQ,GAAG,CAA3B,MAAkC,EAA7F,EAAiG;MAC/Fc,QAAQ,IAAI7B,IAAI,CAACH,KAAL,CAAW0B,UAAX,EAAuBR,QAAvB,CAAZ;MACA,OAAO,IAAIhE,KAAJ,CAAUC,SAAS,CAAC8E,YAApB,EAAkCd,KAAlC,EAAyCD,QAAQ,GAAG,CAApD,EAAuDvD,IAAvD,EAA6D8C,GAA7D,EAAkEP,IAAlE,EAAwE9C,sBAAsB,CAAC4E,QAAD,CAA9F,CAAP;IACD,CALwE,CAKvE;;;IAGF,IAAIzC,IAAI,GAAG,MAAP,IAAiBA,IAAI,KAAK,MAA1B,IAAoCA,IAAI,KAAK,MAA7C,IAAuDA,IAAI,KAAK,MAApE,EAA4E;MAC1E,MAAMtC,WAAW,CAACK,MAAD,EAAS4D,QAAT,EAAmB,oCAAoCrB,MAApC,CAA2CP,aAAa,CAACC,IAAD,CAAxD,EAAgE,GAAhE,CAAnB,CAAjB;IACD;;IAED,IAAIA,IAAI,KAAK,EAAb,EAAiB;MACf;MACA,EAAE2B,QAAF;MACA,EAAEjB,KAAK,CAACtC,IAAR;MACAsC,KAAK,CAACrC,SAAN,GAAkBsD,QAAlB;IACD,CALD,MAKO,IAAI3B,IAAI,KAAK,EAAb,EAAiB;MACtB;MACA,IAAIY,IAAI,CAACO,UAAL,CAAgBQ,QAAQ,GAAG,CAA3B,MAAkC,EAAtC,EAA0C;QACxCA,QAAQ,IAAI,CAAZ;MACD,CAFD,MAEO;QACL,EAAEA,QAAF;MACD;;MAED,EAAEjB,KAAK,CAACtC,IAAR;MACAsC,KAAK,CAACrC,SAAN,GAAkBsD,QAAlB;IACD,CAVM,MAUA,KAAK;IACZ3B,IAAI,KAAK,EAAT,IAAeY,IAAI,CAACO,UAAL,CAAgBQ,QAAQ,GAAG,CAA3B,MAAkC,EAAjD,IAAuDf,IAAI,CAACO,UAAL,CAAgBQ,QAAQ,GAAG,CAA3B,MAAkC,EAAzF,IAA+Ff,IAAI,CAACO,UAAL,CAAgBQ,QAAQ,GAAG,CAA3B,MAAkC,EAD1H,EAC8H;MACnIc,QAAQ,IAAI7B,IAAI,CAACH,KAAL,CAAW0B,UAAX,EAAuBR,QAAvB,IAAmC,KAA/C;MACAA,QAAQ,IAAI,CAAZ;MACAQ,UAAU,GAAGR,QAAb;IACD,CALM,MAKA;MACL,EAAEA,QAAF;IACD;EACF;;EAED,MAAMjE,WAAW,CAACK,MAAD,EAAS4D,QAAT,EAAmB,sBAAnB,CAAjB;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASY,WAAT,CAAqBI,CAArB,EAAwBC,CAAxB,EAA2BC,CAA3B,EAA8BC,CAA9B,EAAiC;EAC/B,OAAOC,QAAQ,CAACJ,CAAD,CAAR,IAAe,EAAf,GAAoBI,QAAQ,CAACH,CAAD,CAAR,IAAe,CAAnC,GAAuCG,QAAQ,CAACF,CAAD,CAAR,IAAe,CAAtD,GAA0DE,QAAQ,CAACD,CAAD,CAAzE;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASC,QAAT,CAAkBJ,CAAlB,EAAqB;EACnB,OAAOA,CAAC,IAAI,EAAL,IAAWA,CAAC,IAAI,EAAhB,GAAqBA,CAAC,GAAG,EAAzB,CAA4B;EAA5B,EACLA,CAAC,IAAI,EAAL,IAAWA,CAAC,IAAI,EAAhB,GAAqBA,CAAC,GAAG,EAAzB,CAA4B;EAA5B,EACAA,CAAC,IAAI,EAAL,IAAWA,CAAC,IAAI,GAAhB,GAAsBA,CAAC,GAAG,EAA1B,CAA6B;EAA7B,EACA,CAAC,CAHH;AAID;AACD;AACA;AACA;AACA;AACA;;;AAGA,SAAStB,QAAT,CAAkBtD,MAAlB,EAA0B6D,KAA1B,EAAiCxD,IAAjC,EAAuC8C,GAAvC,EAA4CP,IAA5C,EAAkD;EAChD,IAAIC,IAAI,GAAG7C,MAAM,CAAC6C,IAAlB;EACA,IAAIC,UAAU,GAAGD,IAAI,CAACE,MAAtB;EACA,IAAIa,QAAQ,GAAGC,KAAK,GAAG,CAAvB;EACA,IAAI5B,IAAI,GAAG,CAAX;;EAEA,OAAO2B,QAAQ,KAAKd,UAAb,IAA2B,CAACZ,KAAK,CAACD,IAAI,GAAGY,IAAI,CAACO,UAAL,CAAgBQ,QAAhB,CAAR,CAAjC,KAAwE3B,IAAI,KAAK,EAAT,IAAe;EAC9FA,IAAI,IAAI,EAAR,IAAcA,IAAI,IAAI,EADyD,IACnD;EAC5BA,IAAI,IAAI,EAAR,IAAcA,IAAI,IAAI,EAFyD,IAEnD;EAC5BA,IAAI,IAAI,EAAR,IAAcA,IAAI,IAAI,GAHf,CAAP,CAG2B;EAH3B,EAIE;IACA,EAAE2B,QAAF;EACD;;EAED,OAAO,IAAIhE,KAAJ,CAAUC,SAAS,CAACoF,IAApB,EAA0BpB,KAA1B,EAAiCD,QAAjC,EAA2CvD,IAA3C,EAAiD8C,GAAjD,EAAsDP,IAAtD,EAA4DC,IAAI,CAACH,KAAL,CAAWmB,KAAX,EAAkBD,QAAlB,CAA5D,CAAP;AACD,C,CAAC;;;AAGF,SAASK,WAAT,CAAqBhC,IAArB,EAA2B;EACzB,OAAOA,IAAI,KAAK,EAAT,IAAeA,IAAI,IAAI,EAAR,IAAcA,IAAI,IAAI,EAArC,IAA2CA,IAAI,IAAI,EAAR,IAAcA,IAAI,IAAI,GAAxE;AACD"},"metadata":{},"sourceType":"module"}