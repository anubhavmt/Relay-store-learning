{"ast":null,"code":"/*!\n * is-directory <https://github.com/jonschlinkert/is-directory>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n'use strict';\n\nvar fs = require('fs');\n/**\n * async\n */\n\n\nfunction isDirectory(filepath, cb) {\n  if (typeof cb !== 'function') {\n    throw new Error('expected a callback function');\n  }\n\n  if (typeof filepath !== 'string') {\n    cb(new Error('expected filepath to be a string'));\n    return;\n  }\n\n  fs.stat(filepath, function (err, stats) {\n    if (err) {\n      if (err.code === 'ENOENT') {\n        cb(null, false);\n        return;\n      }\n\n      cb(err);\n      return;\n    }\n\n    cb(null, stats.isDirectory());\n  });\n}\n/**\n * sync\n */\n\n\nisDirectory.sync = function isDirectorySync(filepath) {\n  if (typeof filepath !== 'string') {\n    throw new Error('expected filepath to be a string');\n  }\n\n  try {\n    var stat = fs.statSync(filepath);\n    return stat.isDirectory();\n  } catch (err) {\n    if (err.code === 'ENOENT') {\n      return false;\n    } else {\n      throw err;\n    }\n  }\n\n  return false;\n};\n/**\n * Expose `isDirectory`\n */\n\n\nmodule.exports = isDirectory;","map":{"version":3,"names":["fs","require","isDirectory","filepath","cb","Error","stat","err","stats","code","sync","isDirectorySync","statSync","module","exports"],"sources":["/Users/anubhavgupta/Documents/react_learning/graphql-react/relay-learning/node_modules/is-directory/index.js"],"sourcesContent":["/*!\n * is-directory <https://github.com/jonschlinkert/is-directory>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nvar fs = require('fs');\n\n/**\n * async\n */\n\nfunction isDirectory(filepath, cb) {\n  if (typeof cb !== 'function') {\n    throw new Error('expected a callback function');\n  }\n\n  if (typeof filepath !== 'string') {\n    cb(new Error('expected filepath to be a string'));\n    return;\n  }\n\n  fs.stat(filepath, function(err, stats) {\n    if (err) {\n      if (err.code === 'ENOENT') {\n        cb(null, false);\n        return;\n      }\n      cb(err);\n      return;\n    }\n    cb(null, stats.isDirectory());\n  });\n}\n\n/**\n * sync\n */\n\nisDirectory.sync = function isDirectorySync(filepath) {\n  if (typeof filepath !== 'string') {\n    throw new Error('expected filepath to be a string');\n  }\n\n  try {\n    var stat = fs.statSync(filepath);\n    return stat.isDirectory();\n  } catch (err) {\n    if (err.code === 'ENOENT') {\n      return false;\n    } else {\n      throw err;\n    }\n  }\n  return false;\n};\n\n/**\n * Expose `isDirectory`\n */\n\nmodule.exports = isDirectory;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;AAEA;AACA;AACA;;;AAEA,SAASC,WAAT,CAAqBC,QAArB,EAA+BC,EAA/B,EAAmC;EACjC,IAAI,OAAOA,EAAP,KAAc,UAAlB,EAA8B;IAC5B,MAAM,IAAIC,KAAJ,CAAU,8BAAV,CAAN;EACD;;EAED,IAAI,OAAOF,QAAP,KAAoB,QAAxB,EAAkC;IAChCC,EAAE,CAAC,IAAIC,KAAJ,CAAU,kCAAV,CAAD,CAAF;IACA;EACD;;EAEDL,EAAE,CAACM,IAAH,CAAQH,QAAR,EAAkB,UAASI,GAAT,EAAcC,KAAd,EAAqB;IACrC,IAAID,GAAJ,EAAS;MACP,IAAIA,GAAG,CAACE,IAAJ,KAAa,QAAjB,EAA2B;QACzBL,EAAE,CAAC,IAAD,EAAO,KAAP,CAAF;QACA;MACD;;MACDA,EAAE,CAACG,GAAD,CAAF;MACA;IACD;;IACDH,EAAE,CAAC,IAAD,EAAOI,KAAK,CAACN,WAAN,EAAP,CAAF;EACD,CAVD;AAWD;AAED;AACA;AACA;;;AAEAA,WAAW,CAACQ,IAAZ,GAAmB,SAASC,eAAT,CAAyBR,QAAzB,EAAmC;EACpD,IAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;IAChC,MAAM,IAAIE,KAAJ,CAAU,kCAAV,CAAN;EACD;;EAED,IAAI;IACF,IAAIC,IAAI,GAAGN,EAAE,CAACY,QAAH,CAAYT,QAAZ,CAAX;IACA,OAAOG,IAAI,CAACJ,WAAL,EAAP;EACD,CAHD,CAGE,OAAOK,GAAP,EAAY;IACZ,IAAIA,GAAG,CAACE,IAAJ,KAAa,QAAjB,EAA2B;MACzB,OAAO,KAAP;IACD,CAFD,MAEO;MACL,MAAMF,GAAN;IACD;EACF;;EACD,OAAO,KAAP;AACD,CAhBD;AAkBA;AACA;AACA;;;AAEAM,MAAM,CAACC,OAAP,GAAiBZ,WAAjB"},"metadata":{},"sourceType":"script"}