{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar compileGraphQLTag = require('./compileGraphQLTag');\n\nvar getValidGraphQLTag = require('./getValidGraphQLTag');\n\nvar cosmiconfig = require('cosmiconfig');\n\nvar configExplorer = cosmiconfig('relay', {\n  searchPlaces: ['relay.config.js', 'relay.config.json', 'package.json'],\n  loaders: {\n    '.json': cosmiconfig.loadJson,\n    '.js': cosmiconfig.loadJs,\n    noExt: cosmiconfig.loadYaml\n  }\n});\nvar RelayConfig;\nvar result = configExplorer.searchSync();\n\nif (result) {\n  RelayConfig = result.config;\n}\n/**\n * Using babel-plugin-relay with only the modern runtime?\n *\n *     {\n *       plugins: [\n *         \"relay\"\n *       ]\n *     }\n */\n\n\nmodule.exports = function BabelPluginRelay(context) {\n  var t = context.types;\n\n  if (!t) {\n    throw new Error('BabelPluginRelay: Expected plugin context to include \"types\", but got:' + String(context));\n  }\n\n  var visitor = {\n    TaggedTemplateExpression: function TaggedTemplateExpression(path, state) {\n      // Convert graphql`` literals\n      var ast = getValidGraphQLTag(path);\n\n      if (ast) {\n        compileGraphQLTag(t, path, state, ast);\n        return;\n      }\n    }\n  };\n  return {\n    visitor: {\n      Program: function Program(path, state) {\n        path.traverse(visitor, (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, state), {}, {\n          opts: (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, RelayConfig), state.opts)\n        }));\n      }\n    }\n  };\n};","map":{"version":3,"names":["_interopRequireDefault","require","_objectSpread2","compileGraphQLTag","getValidGraphQLTag","cosmiconfig","configExplorer","searchPlaces","loaders","loadJson","loadJs","noExt","loadYaml","RelayConfig","result","searchSync","config","module","exports","BabelPluginRelay","context","t","types","Error","String","visitor","TaggedTemplateExpression","path","state","ast","Program","traverse","opts"],"sources":["/Users/anubhavgupta/Documents/react_learning/graphql-react/relay-learning/node_modules/babel-plugin-relay/lib/BabelPluginRelay.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar compileGraphQLTag = require('./compileGraphQLTag');\n\nvar getValidGraphQLTag = require('./getValidGraphQLTag');\n\nvar cosmiconfig = require('cosmiconfig');\n\nvar configExplorer = cosmiconfig('relay', {\n  searchPlaces: ['relay.config.js', 'relay.config.json', 'package.json'],\n  loaders: {\n    '.json': cosmiconfig.loadJson,\n    '.js': cosmiconfig.loadJs,\n    noExt: cosmiconfig.loadYaml\n  }\n});\nvar RelayConfig;\nvar result = configExplorer.searchSync();\n\nif (result) {\n  RelayConfig = result.config;\n}\n\n/**\n * Using babel-plugin-relay with only the modern runtime?\n *\n *     {\n *       plugins: [\n *         \"relay\"\n *       ]\n *     }\n */\nmodule.exports = function BabelPluginRelay(context) {\n  var t = context.types;\n\n  if (!t) {\n    throw new Error('BabelPluginRelay: Expected plugin context to include \"types\", but got:' + String(context));\n  }\n\n  var visitor = {\n    TaggedTemplateExpression: function TaggedTemplateExpression(path, state) {\n      // Convert graphql`` literals\n      var ast = getValidGraphQLTag(path);\n\n      if (ast) {\n        compileGraphQLTag(t, path, state, ast);\n        return;\n      }\n    }\n  };\n  return {\n    visitor: {\n      Program: function Program(path, state) {\n        path.traverse(visitor, (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, state), {}, {\n          opts: (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, RelayConfig), state.opts)\n        }));\n      }\n    }\n  };\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEA,IAAIC,cAAc,GAAGF,sBAAsB,CAACC,OAAO,CAAC,sCAAD,CAAR,CAA3C;;AAEA,IAAIE,iBAAiB,GAAGF,OAAO,CAAC,qBAAD,CAA/B;;AAEA,IAAIG,kBAAkB,GAAGH,OAAO,CAAC,sBAAD,CAAhC;;AAEA,IAAII,WAAW,GAAGJ,OAAO,CAAC,aAAD,CAAzB;;AAEA,IAAIK,cAAc,GAAGD,WAAW,CAAC,OAAD,EAAU;EACxCE,YAAY,EAAE,CAAC,iBAAD,EAAoB,mBAApB,EAAyC,cAAzC,CAD0B;EAExCC,OAAO,EAAE;IACP,SAASH,WAAW,CAACI,QADd;IAEP,OAAOJ,WAAW,CAACK,MAFZ;IAGPC,KAAK,EAAEN,WAAW,CAACO;EAHZ;AAF+B,CAAV,CAAhC;AAQA,IAAIC,WAAJ;AACA,IAAIC,MAAM,GAAGR,cAAc,CAACS,UAAf,EAAb;;AAEA,IAAID,MAAJ,EAAY;EACVD,WAAW,GAAGC,MAAM,CAACE,MAArB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,SAASC,gBAAT,CAA0BC,OAA1B,EAAmC;EAClD,IAAIC,CAAC,GAAGD,OAAO,CAACE,KAAhB;;EAEA,IAAI,CAACD,CAAL,EAAQ;IACN,MAAM,IAAIE,KAAJ,CAAU,2EAA2EC,MAAM,CAACJ,OAAD,CAA3F,CAAN;EACD;;EAED,IAAIK,OAAO,GAAG;IACZC,wBAAwB,EAAE,SAASA,wBAAT,CAAkCC,IAAlC,EAAwCC,KAAxC,EAA+C;MACvE;MACA,IAAIC,GAAG,GAAGzB,kBAAkB,CAACuB,IAAD,CAA5B;;MAEA,IAAIE,GAAJ,EAAS;QACP1B,iBAAiB,CAACkB,CAAD,EAAIM,IAAJ,EAAUC,KAAV,EAAiBC,GAAjB,CAAjB;QACA;MACD;IACF;EATW,CAAd;EAWA,OAAO;IACLJ,OAAO,EAAE;MACPK,OAAO,EAAE,SAASA,OAAT,CAAiBH,IAAjB,EAAuBC,KAAvB,EAA8B;QACrCD,IAAI,CAACI,QAAL,CAAcN,OAAd,EAAuB,CAAC,GAAGvB,cAAc,CAAC,SAAD,CAAlB,EAA+B,CAAC,GAAGA,cAAc,CAAC,SAAD,CAAlB,EAA+B,EAA/B,EAAmC0B,KAAnC,CAA/B,EAA0E,EAA1E,EAA8E;UACnGI,IAAI,EAAE,CAAC,GAAG9B,cAAc,CAAC,SAAD,CAAlB,EAA+B,CAAC,GAAGA,cAAc,CAAC,SAAD,CAAlB,EAA+B,EAA/B,EAAmCW,WAAnC,CAA/B,EAAgFe,KAAK,CAACI,IAAtF;QAD6F,CAA9E,CAAvB;MAGD;IALM;EADJ,CAAP;AASD,CA3BD"},"metadata":{},"sourceType":"script"}