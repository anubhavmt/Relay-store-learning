{"ast":null,"code":"var _ApprootQuery,\n    _ApprootAddBookQuery,\n    _ApprootupdateBookQuery,\n    _jsxFileName = \"/Users/anubhavgupta/Documents/react_learning/graphql-react/relay-learning-doc/lazyquery_mutation/src/Approot.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState } from \"react\";\nimport App from \"./App\";\nimport { useLazyLoadQuery, useMutation } from \"react-relay/hooks\";\nimport { Store } from \"relay-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst appquery = _ApprootQuery !== void 0 ? _ApprootQuery : (_ApprootQuery = require(\"./__generated__/ApprootQuery.graphql\"), _ApprootQuery.hash && _ApprootQuery.hash !== \"864bcf0eacbb5308b3ee89bb00f1fab1\" && console.error(\"The definition of 'ApprootQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\"), _ApprootQuery);\nconst appMutatequery = _ApprootAddBookQuery !== void 0 ? _ApprootAddBookQuery : (_ApprootAddBookQuery = require(\"./__generated__/ApprootAddBookQuery.graphql\"), _ApprootAddBookQuery.hash && _ApprootAddBookQuery.hash !== \"eb7b9d81ad8f63ba516e551936327d03\" && console.error(\"The definition of 'ApprootAddBookQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\"), _ApprootAddBookQuery);\nconst appMutateupdatequery = _ApprootupdateBookQuery !== void 0 ? _ApprootupdateBookQuery : (_ApprootupdateBookQuery = require(\"./__generated__/ApprootupdateBookQuery.graphql\"), _ApprootupdateBookQuery.hash && _ApprootupdateBookQuery.hash !== \"dfb156981ede67f7d90c9cfe0988b3fd\" && console.error(\"The definition of 'ApprootupdateBookQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\"), _ApprootupdateBookQuery);\n\nfunction Approot(props) {\n  _s();\n\n  // const [key, setKey] = useState(0);\n  const [refreshedQueryOptions, setRefreshedQueryOptions] = useState(null); // const [commit] = useMutation<ApprootAddBookQuery>(appMutatequery);\n\n  const [commitupdate] = useMutation(appMutateupdatequery);\n  const refresh = useCallback(() => {\n    setRefreshedQueryOptions(prev => {\n      var _prev$fetchkey;\n\n      return {\n        fetchkey: ((_prev$fetchkey = prev === null || prev === void 0 ? void 0 : prev.fetchkey) !== null && _prev$fetchkey !== void 0 ? _prev$fetchkey : 0) + 1,\n        fetchPolicy: \"network-only\"\n      };\n    });\n  }, []);\n  const data = useLazyLoadQuery(appquery, {} // refreshedQueryOptions\n  // { fetchPolicy: \"network-only\", fetchKey: key }\n  ); // console.log(data);\n\n  return /*#__PURE__*/_jsxDEV(React.Suspense, {\n    fallback: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading.....\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 31\n    }, this),\n    children: [/*#__PURE__*/_jsxDEV(App, {\n      books: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      onSubmit: e => {\n        e.preventDefault();\n        let sampeBook = {\n          // id: parseInt(e.target[0].value),\n          id: e.target[0].value,\n          title: e.target[1].value,\n          author: {\n            firstname: e.target[2].value,\n            secondname: e.target[3].value\n          }\n        };\n        let update = {\n          id: \"1\",\n          book: sampeBook\n        }; // let optimisticResponse = {\n        //   title: e.target[0].value,\n        //   author: {\n        //     firstname: e.target[1].value,\n        //     secondname: e.target[2].value,\n        //   },\n        // };\n        // commit({\n        //   variables: update,\n        //   onCompleted: (response, errors) => {\n        //     console.log(\"Response received from server.\");\n        //     refresh();\n        //     // setKey(key + 1);  that also works but we want that only when update fetch key then  fetch it network only else store or netowkr\n        //   },\n        //   onError: (err) => console.error(err),\n        //   updater: (store) => {\n        //     console.log(store.getRootField(\"addBook\"));\n        //   },\n        // });\n        // working\n        // commitMutation(environment, {\n        //   mutation: appMutatequery,\n        //   variables: { book: sampeBook },\n        //   onCompleted: (response, errors) => {\n        //     console.log(\"Response received from server.\");\n        //     setKey(key + 1);\n        //     // setTimeout(() => setKey(key + 1), 3000);\n        //   },\n        //   onError: (err) => console.error(err),\n        //   // optimisticResponse,\n        // });\n        // update mutation\n\n        commitupdate({\n          variables: update,\n          onCompleted: (response, errors) => {\n            console.log(\"Response received from server.\");\n            console.log(Store); // refresh();\n            // setKey(key + 1);  that also works but we want that only when update fetch key then  fetch it network only else store or netowkr\n          },\n          updater: store => {\n            console.log(store);\n          },\n          onError: err => console.error(err)\n        });\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"fname\",\n        children: \"Book id:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"fname\",\n        placeholder: \"Type Book id\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 71\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"fname\",\n        children: \"Book title:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"fname\",\n        placeholder: \"Type Book title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 72\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"fname\",\n        children: \"Author FirstName:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"fname\",\n        placeholder: \"type author first name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"fname\",\n        children: \"Author LastName:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"fname\",\n        placeholder: \"Type author lastname\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Approot, \"/Gu+7gwjEHRphK1SoPxQXAgxoxE=\", false, function () {\n  return [useMutation, useLazyLoadQuery];\n});\n\n_c = Approot;\nexport default Approot;\n\nvar _c;\n\n$RefreshReg$(_c, \"Approot\");","map":{"version":3,"names":["React","useCallback","useState","App","useLazyLoadQuery","useMutation","Store","appquery","appMutatequery","appMutateupdatequery","Approot","props","refreshedQueryOptions","setRefreshedQueryOptions","commitupdate","refresh","prev","fetchkey","fetchPolicy","data","e","preventDefault","sampeBook","id","target","value","title","author","firstname","secondname","update","book","variables","onCompleted","response","errors","console","log","updater","store","onError","err","error"],"sources":["/Users/anubhavgupta/Documents/react_learning/graphql-react/relay-learning-doc/lazyquery_mutation/src/Approot.tsx"],"sourcesContent":["import React, { useCallback, useState } from \"react\";\nimport App from \"./App\";\nimport { graphql } from \"babel-plugin-relay/macro\";\nimport { useLazyLoadQuery, useMutation } from \"react-relay/hooks\";\nimport { ApprootQuery } from \"./__generated__/ApprootQuery.graphql\";\nimport { ApprootAddBookQuery } from \"./__generated__/ApprootAddBookQuery.graphql\";\nimport { ApprootAddBookQuery$variables } from \"./__generated__/ApprootAddBookQuery.graphql\";\nimport {\n  ApprootupdateBookQuery,\n  ApprootupdateBookQuery$variables,\n} from \"./__generated__/ApprootupdateBookQuery.graphql\";\nimport { bookInput } from \"./__generated__/ApprootAddBookQuery.graphql\";\nimport { RecordSourceSelectorProxy, Store } from \"relay-runtime\";\n\nconst appquery = graphql`\n  # Queries in graphql tags must start with the module name ('App') and end with 'Query'. Got 'allbook' instead.\n  query ApprootQuery {\n    ...App_detail\n  }\n`;\n\nconst appMutatequery = graphql`\n  # Queries in graphql tags must start with the module name ('App') and end with 'Query'. Got 'allbook' instead.\n\n  mutation ApprootAddBookQuery($book: bookInput!) {\n    addBook(book: $book) {\n      title\n      author {\n        ...Author_detail\n      }\n      # title\n    }\n  }\n`;\n\nconst appMutateupdatequery = graphql`\n  # Queries in graphql tags must start with the module name ('App') and end with 'Query'. Got 'allbook' instead.\n\n  mutation ApprootupdateBookQuery($id: String!, $book: bookInput!) {\n    updateBook(bookId: $id, book: $book) {\n      id\n      ...Title_detail\n    }\n  }\n`;\n\nfunction Approot(props: any) {\n  // const [key, setKey] = useState(0);\n  const [refreshedQueryOptions, setRefreshedQueryOptions] = useState<\n    any | null\n  >(null);\n  // const [commit] = useMutation<ApprootAddBookQuery>(appMutatequery);\n  const [commitupdate] =\n    useMutation<ApprootupdateBookQuery>(appMutateupdatequery);\n\n  const refresh = useCallback(() => {\n    setRefreshedQueryOptions((prev: any) => ({\n      fetchkey: (prev?.fetchkey ?? 0) + 1,\n      fetchPolicy: \"network-only\",\n    }));\n  }, []);\n\n  const data = useLazyLoadQuery<ApprootQuery>(\n    appquery,\n    {}\n    // refreshedQueryOptions\n    // { fetchPolicy: \"network-only\", fetchKey: key }\n  );\n\n  // console.log(data);\n\n  return (\n    <React.Suspense fallback={<div>Loading.....</div>}>\n      <App books={data} />\n      <form\n        className=\"form\"\n        onSubmit={(e: any) => {\n          e.preventDefault();\n\n          let sampeBook: bookInput = {\n            // id: parseInt(e.target[0].value),\n\n            id: e.target[0].value,\n            title: e.target[1].value,\n            author: {\n              firstname: e.target[2].value,\n              secondname: e.target[3].value,\n            },\n          };\n\n          let update: ApprootupdateBookQuery$variables = {\n            id: \"1\",\n            book: sampeBook,\n          };\n          // let optimisticResponse = {\n          //   title: e.target[0].value,\n          //   author: {\n          //     firstname: e.target[1].value,\n          //     secondname: e.target[2].value,\n          //   },\n          // };\n\n          // commit({\n          //   variables: update,\n          //   onCompleted: (response, errors) => {\n          //     console.log(\"Response received from server.\");\n          //     refresh();\n          //     // setKey(key + 1);  that also works but we want that only when update fetch key then  fetch it network only else store or netowkr\n          //   },\n          //   onError: (err) => console.error(err),\n          //   updater: (store) => {\n          //     console.log(store.getRootField(\"addBook\"));\n          //   },\n          // });\n\n          // working\n\n          // commitMutation(environment, {\n          //   mutation: appMutatequery,\n          //   variables: { book: sampeBook },\n          //   onCompleted: (response, errors) => {\n          //     console.log(\"Response received from server.\");\n          //     setKey(key + 1);\n          //     // setTimeout(() => setKey(key + 1), 3000);\n          //   },\n          //   onError: (err) => console.error(err),\n          //   // optimisticResponse,\n          // });\n\n          // update mutation\n\n          commitupdate({\n            variables: update,\n            onCompleted: (response, errors) => {\n              console.log(\"Response received from server.\");\n              console.log(Store);\n\n              // refresh();\n              // setKey(key + 1);  that also works but we want that only when update fetch key then  fetch it network only else store or netowkr\n            },\n            updater: (store: RecordSourceSelectorProxy) => {\n              console.log(store);\n            },\n            onError: (err) => console.error(err),\n          });\n        }}\n      >\n        <label htmlFor=\"fname\">Book id:</label>\n        <input type=\"number\" id=\"fname\" placeholder=\"Type Book id\" /> <br></br>\n        <label htmlFor=\"fname\">Book title:</label>\n        <input type=\"text\" id=\"fname\" placeholder=\"Type Book title\" /> <br></br>\n        <label htmlFor=\"fname\">Author FirstName:</label>\n        <input type=\"text\" id=\"fname\" placeholder=\"type author first name\" />\n        <br></br>\n        <label htmlFor=\"fname\">Author LastName:</label>\n        <input type=\"text\" id=\"fname\" placeholder=\"Type author lastname\" />\n        <br></br>\n        <input type=\"submit\" />\n      </form>\n    </React.Suspense>\n  );\n}\n\nexport default Approot;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}