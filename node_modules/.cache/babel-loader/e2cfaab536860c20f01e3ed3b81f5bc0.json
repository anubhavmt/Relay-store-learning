{"ast":null,"code":"var _ApprootQuery,\n    _ApprootAddBookQuery,\n    _jsxFileName = \"/Users/anubhavgupta/Documents/react_learning/graphql-react/relay-learning-doc/lazyquery_mutation/src/Approot.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState } from \"react\";\nimport App from \"./App\";\nimport { useLazyLoadQuery, commitMutation } from \"react-relay\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst appquery = _ApprootQuery !== void 0 ? _ApprootQuery : (_ApprootQuery = require(\"./__generated__/ApprootQuery.graphql\"), _ApprootQuery.hash && _ApprootQuery.hash !== \"864bcf0eacbb5308b3ee89bb00f1fab1\" && console.error(\"The definition of 'ApprootQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\"), _ApprootQuery);\nconst appMutatequery = _ApprootAddBookQuery !== void 0 ? _ApprootAddBookQuery : (_ApprootAddBookQuery = require(\"./__generated__/ApprootAddBookQuery.graphql\"), _ApprootAddBookQuery.hash && _ApprootAddBookQuery.hash !== \"eb7b9d81ad8f63ba516e551936327d03\" && console.error(\"The definition of 'ApprootAddBookQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\"), _ApprootAddBookQuery);\n\nfunction Approot(props) {\n  _s();\n\n  const [refreshedQueryOptions, setRefreshedQueryOptions] = useState(0);\n  const data = useLazyLoadQuery(appquery, {}, {\n    fetchPolicy: \"network-only\"\n  });\n  const refresh = useCallback(() => {\n    // Trigger a re-render of useLazyLoadQuery with the same variables,\n    // but an updated fetchKey and fetchPolicy.\n    // The new fetchKey will ensure that the query is fully\n    // re-evaluated and refetched.\n    // The fetchPolicy ensures that we always fetch from the network\n    // and skip the local data cache.\n    setRefreshedQueryOptions(prev => {\n      var _prev$fetchKey;\n\n      return {\n        fetchKey: ((_prev$fetchKey = prev === null || prev === void 0 ? void 0 : prev.fetchKey) !== null && _prev$fetchKey !== void 0 ? _prev$fetchKey : 0) + 1,\n        fetchPolicy: \"network-only\"\n      };\n    });\n  }, [\n    /* ... */\n  ]); // console.log(data);\n\n  return /*#__PURE__*/_jsxDEV(React.Suspense, {\n    fallback: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading.....\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 31\n    }, this),\n    children: [/*#__PURE__*/_jsxDEV(App, {\n      books: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      onSubmit: e => {\n        e.preventDefault();\n        let sampeBook = {\n          title: e.target[0].value,\n          author: {\n            firstname: e.target[1].value,\n            secondname: e.target[2].value\n          }\n        }; // let update: ApprootAddBookQuery$variables = {\n        //   book: sampeBook,\n        // };\n        // let optimisticResponse = {\n        //   title: e.target[0].value,\n        //   author: {\n        //     firstname: e.target[1].value,\n        //     secondname: e.target[2].value,\n        //   },\n        // };\n\n        commitMutation(props.relay.environment, {\n          mutation: appMutatequery,\n          variables: {\n            book: sampeBook\n          },\n          onCompleted: (response, errors) => {\n            console.log(\"Response received from server.\");\n            refresh();\n          },\n          onError: err => console.error(err) // optimisticResponse,\n\n        });\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"fname\",\n        children: \"Book title:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"fname\",\n        placeholder: \"Type Book title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 72\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"fname\",\n        children: \"Author FirstName:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"fname\",\n        placeholder: \"type author first name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"fname\",\n        children: \"Author LastName:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"fname\",\n        placeholder: \"Type author lastname\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Approot, \"XQiNXjHKzyLacCfc9GgJNlNesHI=\", false, function () {\n  return [useLazyLoadQuery];\n});\n\n_c = Approot;\nexport default Approot;\n\nvar _c;\n\n$RefreshReg$(_c, \"Approot\");","map":{"version":3,"names":["React","useCallback","useState","App","useLazyLoadQuery","commitMutation","appquery","appMutatequery","Approot","props","refreshedQueryOptions","setRefreshedQueryOptions","data","fetchPolicy","refresh","prev","fetchKey","e","preventDefault","sampeBook","title","target","value","author","firstname","secondname","relay","environment","mutation","variables","book","onCompleted","response","errors","console","log","onError","err","error"],"sources":["/Users/anubhavgupta/Documents/react_learning/graphql-react/relay-learning-doc/lazyquery_mutation/src/Approot.tsx"],"sourcesContent":["import React, { useCallback, useState } from \"react\";\nimport App from \"./App\";\nimport { graphql } from \"babel-plugin-relay/macro\";\nimport { useLazyLoadQuery, commitMutation } from \"react-relay\";\nimport Author from \"./Author\";\nimport { ApprootQuery } from \"./__generated__/ApprootQuery.graphql\";\nimport { bookInput } from \"./__generated__/AppAddBookQuery.graphql\";\nimport { ApprootAddBookQuery } from \"./__generated__/ApprootAddBookQuery.graphql\";\nimport { ApprootAddBookQuery$variables } from \"./__generated__/ApprootAddBookQuery.graphql\";\nimport environment from \"./RelayEnvironment\";\nimport { createTypeReferenceDirectiveResolutionCache } from \"typescript\";\n\nconst appquery = graphql`\n  # Queries in graphql tags must start with the module name ('App') and end with 'Query'. Got 'allbook' instead.\n  query ApprootQuery {\n    ...App_detail\n  }\n`;\n\nconst appMutatequery = graphql`\n  # Queries in graphql tags must start with the module name ('App') and end with 'Query'. Got 'allbook' instead.\n  mutation ApprootAddBookQuery($book: bookInput!) {\n    addBook(book: $book) {\n      title\n      author {\n        ...Author_detail\n      }\n      # title\n    }\n  }\n`;\n\nfunction Approot(props: any) {\n  const [refreshedQueryOptions, setRefreshedQueryOptions] = useState(0);\n\n  const data = useLazyLoadQuery<ApprootQuery>(\n    appquery,\n    {},\n    { fetchPolicy: \"network-only\" }\n  );\n\n  const refresh = useCallback(\n    () => {\n      // Trigger a re-render of useLazyLoadQuery with the same variables,\n      // but an updated fetchKey and fetchPolicy.\n      // The new fetchKey will ensure that the query is fully\n      // re-evaluated and refetched.\n      // The fetchPolicy ensures that we always fetch from the network\n      // and skip the local data cache.\n      setRefreshedQueryOptions((prev: any) => ({\n        fetchKey: (prev?.fetchKey ?? 0) + 1,\n        fetchPolicy: \"network-only\",\n      }));\n    },\n    [\n      /* ... */\n    ]\n  );\n  // console.log(data);\n\n  return (\n    <React.Suspense fallback={<div>Loading.....</div>}>\n      <App books={data} />\n      <form\n        className=\"form\"\n        onSubmit={(e: any) => {\n          e.preventDefault();\n          let sampeBook: bookInput = {\n            title: e.target[0].value,\n            author: {\n              firstname: e.target[1].value,\n              secondname: e.target[2].value,\n            },\n          };\n          // let update: ApprootAddBookQuery$variables = {\n          //   book: sampeBook,\n          // };\n          // let optimisticResponse = {\n          //   title: e.target[0].value,\n          //   author: {\n          //     firstname: e.target[1].value,\n          //     secondname: e.target[2].value,\n          //   },\n          // };\n          commitMutation(props.relay.environment, {\n            mutation: appMutatequery,\n            variables: { book: sampeBook },\n            onCompleted: (response, errors) => {\n              console.log(\"Response received from server.\");\n              refresh();\n            },\n            onError: (err) => console.error(err),\n            // optimisticResponse,\n          });\n        }}\n      >\n        <label htmlFor=\"fname\">Book title:</label>\n        <input type=\"text\" id=\"fname\" placeholder=\"Type Book title\" /> <br></br>\n        <label htmlFor=\"fname\">Author FirstName:</label>\n        <input type=\"text\" id=\"fname\" placeholder=\"type author first name\" />\n        <br></br>\n        <label htmlFor=\"fname\">Author LastName:</label>\n        <input type=\"text\" id=\"fname\" placeholder=\"Type author lastname\" />\n        <br></br>\n        <input type=\"submit\" />\n      </form>\n    </React.Suspense>\n  );\n}\n\nexport default Approot;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}