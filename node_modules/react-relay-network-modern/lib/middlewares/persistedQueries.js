"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = persistedQueriesMiddleware;

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/* eslint-disable no-console */
function makePersistedQueryRequestWithFallback(_x) {
  return _makePersistedQueryRequestWithFallback.apply(this, arguments);
}

function _makePersistedQueryRequestWithFallback() {
  _makePersistedQueryRequestWithFallback = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(o) {
    var original,
        hasRunFallback,
        makeFallback,
        makeRequest,
        _args3 = arguments;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            original = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : false;
            hasRunFallback = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : false;

            makeFallback = /*#__PURE__*/function () {
              var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(prevError) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        if (!hasRunFallback) {
                          _context.next = 2;
                          break;
                        }

                        throw prevError;

                      case 2:
                        return _context.abrupt("return", makePersistedQueryRequestWithFallback(o, true, true));

                      case 3:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));

              return function makeFallback(_x2) {
                return _ref.apply(this, arguments);
              };
            }();

            makeRequest = /*#__PURE__*/function () {
              var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                var _o$options, persistedQueriesReq, _persistedQueriesReq$, cacheID, id, queryText, queryId, body;

                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        _context2.prev = 0;
                        // We make a new duplicate request and see if the backend is able to
                        // process it
                        // If the backend rejects it we fallback to the original request (which has the text query)
                        persistedQueriesReq = JSON.parse(JSON.stringify(o.req));
                        _persistedQueriesReq$ = persistedQueriesReq.operation, cacheID = _persistedQueriesReq$.cacheID, id = _persistedQueriesReq$.id, queryText = _persistedQueriesReq$.text;
                        queryId = id || cacheID;

                        if (!(!queryId && (!((_o$options = o.options) !== null && _o$options !== void 0 && _o$options.hash) || !queryText))) {
                          _context2.next = 6;
                          break;
                        }

                        throw new Error('Either query id or hashing function & query must be defined!');

                      case 6:
                        // Add doc_id to the request and remove the query text
                        body = JSON.parse(persistedQueriesReq.fetchOpts.body);
                        delete body.query;
                        body.doc_id = queryId;
                        persistedQueriesReq.fetchOpts.body = JSON.stringify(body);
                        delete persistedQueriesReq.operation.text;
                        _context2.next = 13;
                        return o.next(original ? o.req : persistedQueriesReq);

                      case 13:
                        return _context2.abrupt("return", _context2.sent);

                      case 16:
                        _context2.prev = 16;
                        _context2.t0 = _context2["catch"](0);
                        return _context2.abrupt("return", makeFallback(_context2.t0));

                      case 19:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2, null, [[0, 16]]);
              }));

              return function makeRequest() {
                return _ref2.apply(this, arguments);
              };
            }();

            return _context3.abrupt("return", makeRequest());

          case 5:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _makePersistedQueryRequestWithFallback.apply(this, arguments);
}

function persistedQueriesMiddleware(options) {
  return function (next) {
    return function (req) {
      return makePersistedQueryRequestWithFallback({
        req: req,
        next: next,
        options: options
      });
    };
  };
}